{"version":3,"file":"gridster.component.d.ts","sources":["gridster.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ChangeDetectorRef, ElementRef, NgZone, OnChanges, OnDestroy, OnInit, Renderer2, SimpleChanges } from '@angular/core';\r\nimport { GridsterComponentInterface } from './gridster.interface';\r\nimport { GridsterCompact } from './gridsterCompact.service';\r\nimport { GridsterConfig } from './gridsterConfig.interface';\r\nimport { GridsterConfigS } from './gridsterConfigS.interface';\r\nimport { GridsterEmptyCell } from './gridsterEmptyCell.service';\r\nimport { GridsterItem, GridsterItemComponentInterface } from './gridsterItem.interface';\r\nimport { GridsterRenderer } from './gridsterRenderer.service';\r\nexport declare class GridsterComponent implements OnInit, OnChanges, OnDestroy, GridsterComponentInterface {\r\n    renderer: Renderer2;\r\n    cdRef: ChangeDetectorRef;\r\n    zone: NgZone;\r\n    options: GridsterConfig;\r\n    calculateLayoutDebounce: () => void;\r\n    movingItem: GridsterItem | null;\r\n    previewStyle: () => void;\r\n    el: HTMLElement;\r\n    $options: GridsterConfigS;\r\n    mobile: boolean;\r\n    curWidth: number;\r\n    curHeight: number;\r\n    grid: GridsterItemComponentInterface[];\r\n    columns: number;\r\n    rows: number;\r\n    curColWidth: number;\r\n    curRowHeight: number;\r\n    gridColumns: never[];\r\n    gridRows: never[];\r\n    windowResize: (() => void) | null;\r\n    dragInProgress: boolean;\r\n    emptyCell: GridsterEmptyCell;\r\n    compact: GridsterCompact;\r\n    gridRenderer: GridsterRenderer;\r\n    constructor(el: ElementRef, renderer: Renderer2, cdRef: ChangeDetectorRef, zone: NgZone);\r\n    static checkCollisionTwoItemsForSwaping(item: GridsterItem, item2: GridsterItem): boolean;\r\n    checkCollisionTwoItems(item: GridsterItem, item2: GridsterItem): boolean;\r\n    ngOnInit(): void;\r\n    ngOnChanges(changes: SimpleChanges): void;\r\n    resize(): void;\r\n    setOptions(): void;\r\n    optionsChanged(): void;\r\n    ngOnDestroy(): void;\r\n    onResize(): void;\r\n    checkIfToResize(): boolean;\r\n    setGridSize(): void;\r\n    setGridDimensions(): void;\r\n    calculateLayout(): void;\r\n    updateGrid(): void;\r\n    addItem(itemComponent: GridsterItemComponentInterface): void;\r\n    removeItem(itemComponent: GridsterItemComponentInterface): void;\r\n    checkCollision(item: GridsterItem): GridsterItemComponentInterface | boolean;\r\n    checkGridCollision(item: GridsterItem): boolean;\r\n    findItemWithItem(item: GridsterItem): GridsterItemComponentInterface | boolean;\r\n    findItemsWithItem(item: GridsterItem): Array<GridsterItemComponentInterface>;\r\n    autoPositionItem(itemComponent: GridsterItemComponentInterface): void;\r\n    getNextPossiblePosition(newItem: GridsterItem, startingFrom?: {\r\n        y?: number;\r\n        x?: number;\r\n    }): boolean;\r\n    getFirstPossiblePosition(item: GridsterItem): GridsterItem;\r\n    getLastPossiblePosition(item: GridsterItem): GridsterItem;\r\n    pixelsToPositionX(x: number, roundingMethod: (x: number) => number, noLimit?: boolean): number;\r\n    pixelsToPositionY(y: number, roundingMethod: (x: number) => number, noLimit?: boolean): number;\r\n    positionXToPixels(x: number): number;\r\n    positionYToPixels(y: number): number;\r\n    getItemComponent(item: GridsterItem): GridsterItemComponentInterface | undefined;\r\n    checkCollisionForSwaping(item: GridsterItem): GridsterItemComponentInterface | boolean;\r\n    findItemWithItemForSwaping(item: GridsterItem): GridsterItemComponentInterface | boolean;\r\n    private static getNewArrayLength;\r\n}\r\n"]}