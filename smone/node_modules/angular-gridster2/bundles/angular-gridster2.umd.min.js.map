{"version":3,"sources":["../../../projects/angular-gridster2/src/lib/gridsterConfig.interface.ts","../../../projects/angular-gridster2/src/lib/gridsterCompact.service.ts","../../../projects/angular-gridster2/src/lib/gridsterConfig.constant.ts","../../../projects/angular-gridster2/src/lib/gridsterUtils.service.ts","../../../projects/angular-gridster2/src/lib/gridsterEmptyCell.service.ts","../../../projects/angular-gridster2/src/lib/gridsterRenderer.service.ts","../../../projects/angular-gridster2/src/lib/gridster.component.ts","../../../projects/angular-gridster2/src/lib/gridsterScroll.service.ts","../../../projects/angular-gridster2/src/lib/gridsterPush.service.ts","../../../projects/angular-gridster2/src/lib/gridsterSwap.service.ts","../../../projects/angular-gridster2/src/lib/gridsterDraggable.service.ts","../../../projects/angular-gridster2/src/lib/gridsterPushResize.service.ts","../../../projects/angular-gridster2/src/lib/gridsterResizable.service.ts","../../../projects/angular-gridster2/src/lib/gridsterItem.component.ts","../../../projects/angular-gridster2/src/lib/gridsterItem.interface.ts","../../../projects/angular-gridster2/src/lib/gridster.interface.ts","../../../projects/angular-gridster2/src/lib/gridsterPreview.component.ts","../../../projects/angular-gridster2/src/lib/gridster.module.ts"],"names":["GridType","DisplayGrid","CompactType","DirTypes","GridsterCompact","gridster","this","prototype","destroy","checkCompact","$options","compactType","None","CompactUp","checkCompactMovement","CompactLeft","CompactUpAndLeft","CompactLeftAndUp","CompactRight","CompactUpAndRight","CompactRightAndUp","CompactDown","CompactDownAndLeft","CompactDownAndRight","CompactLeftAndDown","CompactRightAndDown","checkCompactItem","item","moveTillCollision","direction","delta","_this","widgetMoved","grid","forEach","widget","$item","compactEnabled","itemChanged","checkCollision","GridsterConfigService","gridType","Fit","scale","fixedColWidth","fixedRowHeight","keepFixedHeightInMobile","keepFixedWidthInMobile","setGridSize","mobileBreakpoint","allowMultiLayer","defaultLayerIndex","maxLayerIndex","baseLayerIndex","minCols","maxCols","minRows","maxRows","defaultItemCols","defaultItemRows","maxItemCols","maxItemRows","minItemCols","minItemRows","minItemArea","maxItemArea","rowHeightRatio","margin","outerMargin","outerMarginTop","outerMarginRight","outerMarginBottom","outerMarginLeft","useTransformPositioning","scrollSensitivity","scrollSpeed","initCallback","undefined","destroyCallback","gridSizeChangedCallback","itemChangeCallback","itemResizeCallback","itemInitCallback","itemRemovedCallback","itemValidateCallback","enableEmptyCellClick","enableEmptyCellContextMenu","enableEmptyCellDrop","enableEmptyCellDrag","enableOccupiedCellDrop","emptyCellClickCallback","emptyCellContextMenuCallback","emptyCellDropCallback","emptyCellDragCallback","emptyCellDragMaxCols","emptyCellDragMaxRows","ignoreMarginInRow","draggable","delayStart","enabled","ignoreContentClass","ignoreContent","dragHandleClass","stop","start","dropOverItems","dropOverItemsCallback","resizable","handles","s","e","n","w","se","ne","sw","nw","swap","swapWhileDragging","pushItems","disablePushOnDrag","disablePushOnResize","pushDirections","north","east","south","west","pushResizeItems","displayGrid","OnDragAndResize","disableWindowResize","disableWarnings","scrollToNewItems","disableScrollHorizontal","disableScrollVertical","disableAutoPositionOnConflict","dirType","LTR","GridsterUtils","merge","obj1","obj2","properties","p","hasOwnProperty","debounce","func","wait","timeout","context","args","arguments","later","apply","clearTimeout","setTimeout","checkTouchEvent","clientX","touches","length","clientY","changedTouches","checkContentClassForEvent","checkDragHandleClass","target","currentTarget","checkContentClass","checkContentClassForEmptyCellClickEvent","current","hasAttribute","classnames","getAttribute","split","indexOf","parentNode","contentClass","compareItems","a","b","y","x","GridsterEmptyCell","initialItem","movingItem","previewStyle","emptyCellExit","updateOptions","emptyCellClick","options","renderer","listen","el","emptyCellClickCb","bind","emptyCellClickTouch","emptyCellContextMenu","emptyCellContextMenuCb","emptyCellDrop","emptyCellDragDrop","zone","runOutsideAngular","emptyCellMove","emptyCellDragOver","emptyCellDrag","emptyCellMouseDown","emptyCellDragTouch","getValidItemFromEvent","cdRef","markForCheck","preventDefault","stopPropagation","dataTransfer","dropEffect","buttons","emptyCellMMove","emptyCellMouseMove","emptyCellMMoveTouch","emptyCellUp","emptyCellMouseUp","emptyCellUpTouch","getPixelsX","rect","left","scrollLeft","gridRenderer","getLeftMargin","getPixelsY","top","scrollTop","getTopMargin","oldItem","getBoundingClientRect","pixelsToPositionX","Math","floor","pixelsToPositionY","cols","rows","min","abs","GridsterRenderer","updateItem","mobile","clearCellPosition","setStyle","curWidth","round","curColWidth","curRowHeight","width","height","setCellPosition","marginBottom","marginRight","columns","updateGridster","addClass","removeClass1","removeClass2","removeClass3","ScrollVertical","ScrollHorizontal","Fixed","widthRatio","calWidthRatio","VerticalFixed","HorizontalFixed","removeClass","getGridColumnStyle","i","Object","assign","getLeftPosition","gridRows","getGridRowStyle","getTopPosition","gridColumns","d","dPosition","RTL","transform","xPosition","GridsterComponent","nativeElement","JSON","parse","stringify","calculateLayoutDebounce","calculateLayout","curHeight","dragInProgress","emptyCell","compact","checkCollisionTwoItemsForSwaping","item2","horizontalBoundaryItem1","horizontalBoundaryItem2","verticalBoundaryItem1","verticalBoundaryItem2","checkCollisionTwoItems","layerIndex","ngOnInit","ngOnChanges","changes","setOptions","api","optionsChanged","resize","onResize","getNextPossiblePosition","getFirstPossiblePosition","getLastPossiblePosition","getItemComponent","clientWidth","clientHeight","offsetWidth","offsetHeight","checkIfToResize","windowResize","widgetsIndex","ngOnDestroy","scrollWidth","scrollHeight","setGridDimensions","notPlaced","max","marginWidth","marginHeight","updateGrid","setSize","drag","toggle","getNewArrayLength","addItem","itemComponent","autoPositionItem","console","warn","push","removeItem","splice","collision","checkGridCollision","c","findItemWithItem","noNegativePosition","maxGridCols","maxGridRows","inColsLimits","inRowsLimits","minAreaLimit","maxAreaLimit","area","findItemsWithItem","newItem","startingFrom","colsIndex","rowsIndex","canAddToRows","canAddToColumns","tmpItem","farthestItem","reduce","prev","curr","currCoords","roundingMethod","noLimit","position","positionXToPixels","positionYToPixels","find","checkCollisionForSwaping","findItemWithItemForSwaping","overallSize","size","newLength","Number","isFinite","Component","selector","template","encapsulation","ViewEncapsulation","ElementRef","decorators","type","Inject","Renderer2","ChangeDetectorRef","NgZone","Input","gridsterElement","resizeEvent","resizeEventType","intervalE","intervalW","intervalN","intervalS","GridsterPush","gridsterItem","iteration","pushedItems","pushedItemsTemp","pushedItemsTempPath","pushedItemsPath","tryPattern","fromEast","tryWest","trySouth","tryNorth","tryEast","fromWest","fromNorth","fromSouth","disable","pushedItemsOrder","pushed","restoreTempItems","removeFromTempPushed","restoreItems","pushedItem","l","setPushedItems","checkItemChanges","checkPushBack","change","checkPushedItem","conflicts","invert","sort","itemCollision","makePush","canBeDragged","call","lastIndexOf","j","pop","removeFromPushedItem","gridsterItemCollide","addToTempPushed","addToPushed","tempPosition","removeFromPushed","lastPosition","path","scroll","lastMouse","calculateItemPosition","resizeEventScrollType","offsetLeft","offsetTop","elemTopOffset","elemBottomOffset","cancelN","startVertical","cancelS","cancelVertical","elemRightOffset","elemLeftOffset","cancelW","startHorizontal","cancelE","cancelHorizontal","sign","setInterval","cancelScroll","clearInterval","GridsterSwap","swapedItem","swapItems","checkSwapBack","checkSwap","restoreSwapItem","setSwapItem","pushedBy","gridsterItemCollision","copyCollisionX","copyCollisionY","copyX","copyY","diffX","diffY","GridsterDraggable","mousedown","touchstart","dragStart","which","dragFunction","dragMove","dragStopFunction","dragStop","mousemove","touchmove","mouseup","mouseleave","cancelOnBlur","touchend","touchcancel","originalClientX","originalClientY","diffLeft","diffTop","calculateItemPositionFromMousePosition","calculateItemPositionWithScale","calculateItemPositionWithoutScale","run","Promise","resolve","then","makeDrag","cancelDrag","positionX","positionY","positionXBackup","positionYBackup","enableDrag","dragStartFunction","dragStartDelay","cancelMouse","cancelMouseLeave","cancelTouchMove","eventMove","cancelTouchEnd","cancelTouchCancel","GridsterPushResize","row","canBeResized","backUpY","backUpRows","backUpX","backUpCols","GridsterResizable","itemBackup","bottom","right","diffRight","diffBottom","minHeight","minWidth","pushResize","_a","directionFunction","handleN","_b","handleE","handleW","_c","handleS","handleNE","handleNW","handleSE","handleSW","makeResize","cancelResize","newPosition","setItemTop","setItemHeight","setItemLeft","setItemWidth","ceil","resizeEnabled","GridsterItemComponent","defineProperty","getLayerIndex","init","previousValue","dragEnabled","updateItemSize","scrollIntoView","newValue","oldValue","bringToFront","offset","topIndex","targetIndex","sendToBack","HostBinding","GridsterPreviewComponent","NgModule","declarations","imports","CommonModule","exports"],"mappings":"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","sourcesContent":["import {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterItem, GridsterItemComponentInterface} from './gridsterItem.interface';\n\nexport type gridTypes = 'fit' | 'scrollVertical' | 'scrollHorizontal' | 'fixed' | 'verticalFixed' | 'horizontalFixed';\nexport type displayGrids = 'always' | 'onDrag&Resize' | 'none';\nexport type compactTypes =\n  'none'\n  | 'compactUp'\n  | 'compactLeft'\n  | 'compactUp&Left'\n  | 'compactLeft&Up'\n  | 'compactRight'\n  | 'compactUp&Right'\n  | 'compactRight&Up'\n  | 'compactDown'\n  | 'compactDown&Left'\n  | 'compactLeft&Down'\n  | 'compactDown&Right'\n  | 'compactRight&Down';\n\nexport enum GridType {\n  Fit = 'fit',\n  ScrollVertical = 'scrollVertical',\n  ScrollHorizontal = 'scrollHorizontal',\n  Fixed = 'fixed',\n  VerticalFixed = 'verticalFixed',\n  HorizontalFixed = 'horizontalFixed'\n}\n\nexport enum DisplayGrid {\n  Always = 'always',\n  OnDragAndResize = 'onDrag&Resize',\n  None = 'none'\n}\n\nexport enum CompactType {\n  None = 'none',\n  CompactUp = 'compactUp',\n  CompactLeft = 'compactLeft',\n  CompactUpAndLeft = 'compactUp&Left',\n  CompactLeftAndUp = 'compactLeft&Up',\n  CompactRight = 'compactRight',\n  CompactUpAndRight = 'compactUp&Right',\n  CompactRightAndUp = 'compactRight&Up',\n  CompactDown = 'compactDown',\n  CompactDownAndLeft = 'compactDown&Left',\n  CompactLeftAndDown = 'compactLeft&Down',\n  CompactDownAndRight = 'compactDown&Right',\n  CompactRightAndDown = 'compactRight&Down'\n}\n\nexport enum DirTypes {\n  LTR = 'ltr',\n  RTL = 'rtl'\n}\n\nexport type dirTypes = 'ltr' | 'rtl';\n\nexport interface GridsterConfig {\n  gridType?: gridTypes;\n  scale?: number;\n  fixedColWidth?: number;\n  fixedRowHeight?: number;\n  keepFixedHeightInMobile?: boolean;\n  keepFixedWidthInMobile?: boolean;\n  setGridSize?: boolean;\n  compactType?: compactTypes;\n  mobileBreakpoint?: number;\n  allowMultiLayer?: boolean;\n  defaultLayerIndex?: number;\n  maxLayerIndex?: number;\n  baseLayerIndex?: number;\n  minCols?: number;\n  maxCols?: number;\n  minRows?: number;\n  maxRows?: number;\n  defaultItemCols?: number;\n  defaultItemRows?: number;\n  maxItemCols?: number;\n  maxItemRows?: number;\n  minItemCols?: number;\n  minItemRows?: number;\n  minItemArea?: number;\n  maxItemArea?: number;\n  rowHeightRatio?: number;\n  margin?: number;\n  outerMargin?: boolean;\n  outerMarginTop?: number | null;\n  outerMarginRight?: number | null;\n  outerMarginBottom?: number | null;\n  outerMarginLeft?: number | null;\n  useTransformPositioning?: boolean;\n  scrollSensitivity?: number | null;\n  scrollSpeed?: number;\n  initCallback?: (gridster: GridsterComponentInterface) => void;\n  destroyCallback?: (gridster: GridsterComponentInterface) => void;\n  gridSizeChangedCallback?: (gridster: GridsterComponentInterface) => void;\n  itemChangeCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemResizeCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemInitCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemRemovedCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  itemValidateCallback?: (item: GridsterItem) => boolean;\n  draggable?: Draggable;\n  resizable?: Resizable;\n  swap?: boolean;\n  swapWhileDragging?: boolean;\n  pushItems?: boolean;\n  disablePushOnDrag?: boolean;\n  disablePushOnResize?: boolean;\n  disableAutoPositionOnConflict?: boolean;\n  pushDirections?: PushDirections;\n  pushResizeItems?: boolean;\n  displayGrid?: displayGrids;\n  disableWindowResize?: boolean;\n  disableWarnings?: boolean;\n  scrollToNewItems?: boolean;\n  disableScrollHorizontal?: boolean;\n  disableScrollVertical?: boolean;\n  enableEmptyCellClick?: boolean;\n  enableEmptyCellContextMenu?: boolean;\n  enableEmptyCellDrop?: boolean;\n  enableEmptyCellDrag?: boolean;\n  enableOccupiedCellDrop?: boolean;\n  emptyCellClickCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellContextMenuCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellDropCallback?: (event: DragEvent, item: GridsterItem) => void;\n  emptyCellDragCallback?: (event: MouseEvent, item: GridsterItem) => void;\n  emptyCellDragMaxCols?: number;\n  emptyCellDragMaxRows?: number;\n  ignoreMarginInRow?: boolean;\n  dirType?: dirTypes;\n  api?: {\n    resize?: () => void,\n    optionsChanged?: () => void,\n    getNextPossiblePosition?: (newItem: GridsterItem) => boolean,\n    getFirstPossiblePosition?: (item: GridsterItem) => GridsterItem,\n    getLastPossiblePosition?: (item: GridsterItem) => GridsterItem,\n    getItemComponent?: (item: GridsterItem) => GridsterItemComponentInterface | undefined\n  };\n\n  // tslint:disable-next-line:no-any\n  [propName: string]: any;\n}\n\nexport interface DragBase {\n  enabled?: boolean;\n  // tslint:disable-next-line:no-any\n  stop?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent) => Promise<any> | void;\n  start?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface, event: MouseEvent) => void;\n  delayStart?: number;\n}\n\nexport interface Draggable extends DragBase {\n  ignoreContentClass?: string;\n  ignoreContent?: boolean;\n  dragHandleClass?: string;\n  dropOverItems?: boolean;\n  dropOverItemsCallback?: (source: GridsterItem, target: GridsterItem, grid?: GridsterComponentInterface) => void;\n}\n\nexport interface Resizable extends DragBase {\n  handles?: {\n    s: boolean,\n    e: boolean,\n    n: boolean,\n    w: boolean,\n    se: boolean,\n    ne: boolean,\n    sw: boolean,\n    nw: boolean\n  };\n}\n\nexport interface PushDirections {\n  north: boolean;\n  east: boolean;\n  south: boolean;\n  west: boolean;\n}\n","import {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterItem, GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {CompactType} from './gridsterConfig.interface';\n\nexport class GridsterCompact {\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    // @ts-ignore\n    delete this.gridster;\n  }\n\n  checkCompact(): void {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.checkCompactMovement('y', -1);\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.checkCompactMovement('x', -1);\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRight) {\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.checkCompactMovement('y', -1);\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndUp) {\n        this.checkCompactMovement('x', 1);\n        this.checkCompactMovement('y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDown) {\n        this.checkCompactMovement('y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\n        this.checkCompactMovement('y', 1);\n        this.checkCompactMovement('x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\n        this.checkCompactMovement('y', 1);\n        this.checkCompactMovement('x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\n        this.checkCompactMovement('x', -1);\n        this.checkCompactMovement('y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\n        this.checkCompactMovement('x', 1);\n        this.checkCompactMovement('y', 1);\n      }\n    }\n  }\n\n  checkCompactItem(item: GridsterItem): void {\n    if (this.gridster.$options.compactType !== CompactType.None) {\n      if (this.gridster.$options.compactType === CompactType.CompactUp) {\n        this.moveTillCollision(item, 'y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n        this.moveTillCollision(item, 'y', -1);\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n        this.moveTillCollision(item, 'x', -1);\n        this.moveTillCollision(item, 'y', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactUpAndRight) {\n        this.moveTillCollision(item, 'y', -1);\n        this.moveTillCollision(item, 'x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDown) {\n        this.moveTillCollision(item, 'y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndLeft) {\n        this.moveTillCollision(item, 'y', 1);\n        this.moveTillCollision(item, 'x', -1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndDown) {\n        this.moveTillCollision(item, 'x', -1);\n        this.moveTillCollision(item, 'y', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactDownAndRight) {\n        this.moveTillCollision(item, 'y', 1);\n        this.moveTillCollision(item, 'x', 1);\n      } else if (this.gridster.$options.compactType === CompactType.CompactRightAndDown) {\n        this.moveTillCollision(item, 'x', 1);\n        this.moveTillCollision(item, 'y', 1);\n      }\n    }\n  }\n\n  private checkCompactMovement(direction: 'x' | 'y', delta: number): void {\n    let widgetMoved = false;\n    this.gridster.grid.forEach((widget: GridsterItemComponentInterface) => {\n      if (widget.$item.compactEnabled !== false) {\n        const moved = this.moveTillCollision(widget.$item, direction, delta);\n        if (moved) {\n          widgetMoved = true;\n          widget.item[direction] = widget.$item[direction];\n          widget.itemChanged();\n        }\n      }\n    });\n    if (widgetMoved) {\n      this.checkCompact();\n    }\n  }\n\n  private moveTillCollision(item: GridsterItem, direction: 'x' | 'y', delta: number): boolean {\n    item[direction] += delta;\n    if (this.gridster.checkCollision(item)) {\n      item[direction] -= delta;\n      return false;\n    } else {\n      this.moveTillCollision(item, direction, delta);\n      return true;\n    }\n  }\n}\n","import {CompactType, DirTypes, DisplayGrid, GridsterConfig, GridType} from './gridsterConfig.interface';\n\nexport const GridsterConfigService: GridsterConfig = {\n  gridType: GridType.Fit, // 'fit' will fit the items in the container without scroll;\n  scale: 1, // scale param to zoom in/zoom out\n  // 'scrollVertical' will fit on width and height of the items will be the same as the width\n  // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\n  // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\n  // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\n  // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\n  fixedColWidth: 250, // fixed col width for gridType: 'fixed'\n  fixedRowHeight: 250, // fixed row height for gridType: 'fixed'\n  keepFixedHeightInMobile: false, // keep the height from fixed gridType in mobile layout\n  keepFixedWidthInMobile: false, // keep the width from fixed gridType in mobile layout\n  setGridSize: false, // sets grid size depending on content\n  compactType: CompactType.None, // compact items: 'none' | 'compactUp' | 'compactLeft' | 'compactUp&Left' | 'compactLeft&Up'\n  mobileBreakpoint: 640, // if the screen is not wider that this, remove the grid layout and stack the items\n  allowMultiLayer: false,\n  defaultLayerIndex: 0,\n  maxLayerIndex: 2,\n  baseLayerIndex: 1,\n  minCols: 1, // minimum amount of columns in the grid\n  maxCols: 100, // maximum amount of columns in the grid\n  minRows: 1, // minimum amount of rows in the grid\n  maxRows: 100, // maximum amount of rows in the grid\n  defaultItemCols: 1, // default width of an item in columns\n  defaultItemRows: 1, // default height of an item in rows\n  maxItemCols: 50, // max item number of cols\n  maxItemRows: 50, // max item number of rows\n  minItemCols: 1, // min item number of columns\n  minItemRows: 1, // min item number of rows\n  minItemArea: 1, // min item area: cols * rows\n  maxItemArea: 2500, // max item area: cols * rows\n  rowHeightRatio: 1, // row height ratio from column width\n  margin: 10,  // margin between grid items\n  outerMargin: true,  // if margins will apply to the sides of the container\n  outerMarginTop: null, // override outer margin for grid\n  outerMarginRight: null, // override outer margin for grid\n  outerMarginBottom: null, // override outer margin for grid\n  outerMarginLeft: null, // override outer margin for grid\n  useTransformPositioning: true, // toggle between transform or top/left positioning of items\n  scrollSensitivity: 10,  // margin of the dashboard where to start scrolling\n  scrollSpeed: 20,  // how much to scroll each mouse move when in the scrollSensitivity zone\n  initCallback: undefined, // callback to call after grid has initialized. Arguments: gridsterComponent\n  destroyCallback: undefined, // callback to call after grid has destroyed. Arguments: gridsterComponent\n  gridSizeChangedCallback: undefined, // callback to call after grid has changed size. Arguments: gridsterComponent\n  itemChangeCallback: undefined,  // callback to call for each item when is changes x, y, rows, cols.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemResizeCallback: undefined,  // callback to call for each item when width/height changes.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemInitCallback: undefined,  // callback to call for each item when is initialized.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemRemovedCallback: undefined,  // callback to call for each item when is initialized.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemValidateCallback: undefined,  // callback to call to validate item position/size. Return true if valid.\n  // Arguments: gridsterItem\n  enableEmptyCellClick: false, // enable empty cell click events\n  enableEmptyCellContextMenu: false, // enable empty cell context menu (right click) events\n  enableEmptyCellDrop: false, // enable empty cell drop events\n  enableEmptyCellDrag: false, // enable empty cell drag events\n  enableOccupiedCellDrop: false, // enable occupied cell drop events\n  emptyCellClickCallback: undefined, // empty cell click callback\n  emptyCellContextMenuCallback: undefined, // empty cell context menu (right click) callback\n  emptyCellDropCallback: undefined, // empty cell drag drop callback. HTML5 Drag & Drop\n  emptyCellDragCallback: undefined, // empty cell drag and create item like excel cell selection\n  emptyCellDragMaxCols: 50, // limit empty cell drag max cols\n  emptyCellDragMaxRows: 50, // limit empty cell drag max rows\n  // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\n  ignoreMarginInRow: false, // ignore the gap between rows for items which span multiple rows (see #162, #224)\n  draggable: {\n    delayStart: 0, // milliseconds to delay the start of drag, useful for touch interaction\n    enabled: false, // enable/disable draggable items\n    ignoreContentClass: 'gridster-item-content', // default content class to ignore the drag event from\n    ignoreContent: false, // if true drag will start only from elements from `dragHandleClass`\n    dragHandleClass: 'drag-handler', // drag event only from this class. If `ignoreContent` is true.\n    stop: undefined, // callback when dragging an item stops.  Accepts Promise return to cancel/approve drag.\n    start: undefined, // callback when dragging an item starts.\n    // Arguments: item, gridsterItem, event\n    dropOverItems: false, // enable drop items on top other item\n    dropOverItemsCallback: undefined // callback on drop over another item\n    // Arguments: source, target, gridComponent\n  },\n  resizable: {\n    delayStart: 0, // milliseconds to delay the start of resize, useful for touch interaction\n    enabled: false, // enable/disable resizable items\n    handles: {\n      s: true,\n      e: true,\n      n: true,\n      w: true,\n      se: true,\n      ne: true,\n      sw: true,\n      nw: true\n    }, // resizable edges of an item\n    stop: undefined, // callback when resizing an item stops. Accepts Promise return to cancel/approve resize.\n    start: undefined // callback when resizing an item starts.\n    // Arguments: item, gridsterItem, event\n  },\n  swap: true, // allow items to switch position if drop on top of another\n  swapWhileDragging: false, // allow items to switch position while dragging\n  pushItems: false, // push items when resizing and dragging\n  disablePushOnDrag: false, // disable push on drag\n  disablePushOnResize: false, // disable push on resize\n  pushDirections: {north: true, east: true, south: true, west: true}, // control the directions items are pushed\n  pushResizeItems: false, // on resize of item will shrink adjacent items\n  displayGrid: DisplayGrid.OnDragAndResize, // display background grid of rows and columns\n  disableWindowResize: false, // disable the window on resize listener. This will stop grid to recalculate on window resize.\n  disableWarnings: false, // disable console log warnings about misplacement of grid items\n  scrollToNewItems: false, // scroll to new items placed in a scrollable view\n  disableScrollHorizontal: false, // disable horizontal scrolling\n  disableScrollVertical: false, // disable vertical scrolling\n  disableAutoPositionOnConflict: false,  // disable auto-position of items on conflict state,\n  dirType: DirTypes.LTR, // page direction, rtl=right to left ltr= left to right, if you use rtl language set dirType to rtl\n};\n","import {GridsterComponentInterface} from './gridster.interface';\n\nexport class GridsterUtils {\n\n  // tslint:disable-next-line:no-any\n  static merge(obj1: any, obj2: any, properties: any): any {\n    for (const p in obj2) {\n      if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\n        if (typeof obj2[p] === 'object') {\n          obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\n        } else {\n          obj1[p] = obj2[p];\n        }\n      }\n    }\n\n    return obj1;\n  }\n\n  static debounce(func: () => void, wait: number): () => void {\n    let timeout: number | undefined;\n    return function(): void {\n      const context = this;\n      const args = arguments;\n      const later = () => {\n        timeout = undefined;\n        func.apply(context, args);\n      };\n      clearTimeout(timeout);\n      timeout = setTimeout(later, wait);\n    };\n  }\n\n  // tslint:disable-next-line:no-any\n  static checkTouchEvent(e: any): void {\n    if (e.clientX === undefined && e.touches) {\n      if (e.touches && e.touches.length) {\n        e.clientX = e.touches[0].clientX;\n        e.clientY = e.touches[0].clientY;\n      } else if (e.changedTouches && e.changedTouches.length) {\n        e.clientX = e.changedTouches[0].clientX;\n        e.clientY = e.changedTouches[0].clientY;\n      }\n    }\n  }\n\n  static checkContentClassForEvent(gridster: GridsterComponentInterface, e: MouseEvent): boolean {\n    if (gridster.$options.draggable.ignoreContent) {\n      if (!GridsterUtils.checkDragHandleClass(e.target as HTMLElement, e.currentTarget as HTMLElement,\n        gridster.$options.draggable.dragHandleClass, gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    } else {\n      if (GridsterUtils.checkContentClass(e.target as HTMLElement, e.currentTarget as HTMLElement,\n        gridster.$options.draggable.ignoreContentClass)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  static checkContentClassForEmptyCellClickEvent(gridster: GridsterComponentInterface, e: MouseEvent): boolean {\n    return GridsterUtils.checkContentClass(e.target as HTMLElement, e.currentTarget as HTMLElement,\n      gridster.$options.draggable.ignoreContentClass)\n      || GridsterUtils.checkContentClass(e.target as HTMLElement, e.currentTarget as HTMLElement,\n        gridster.$options.draggable.dragHandleClass);\n  }\n\n  static checkDragHandleClass(target: HTMLElement, current: HTMLElement, dragHandleClass: string, ignoreContentClass): boolean {\n    if (!target || target === current) {\n      return false;\n    }\n    if (target.hasAttribute('class')) {\n      // @ts-ignore\n      const classnames = target.getAttribute('class').split(' ');\n      if (classnames.indexOf(dragHandleClass) > -1) {\n        return true;\n      }\n      if (classnames.indexOf(ignoreContentClass) > -1) {\n        return false;\n      }\n    }\n    // @ts-ignore\n    return GridsterUtils.checkDragHandleClass(target.parentNode, current, dragHandleClass, ignoreContentClass);\n  }\n\n  static checkContentClass(target: HTMLElement, current: HTMLElement, contentClass: string): boolean {\n    if (!target || target === current) {\n      return false;\n    }\n    // @ts-ignore\n    if (target.hasAttribute('class') && target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\n      return true;\n    } else {\n      // @ts-ignore\n      return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\n    }\n  }\n\n  static compareItems(a: { x: number, y: number }, b: { x: number, y: number }): number {\n    if (a.y > b.y) {\n      return -1;\n    } else if (a.y < b.y) {\n      return 1;\n    } else if (a.x > b.x) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n}\n","import {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterItem} from './gridsterItem.interface';\n\nexport class GridsterEmptyCell {\n  initialItem: GridsterItem | null;\n  emptyCellClick: (() => void) | null;\n  emptyCellClickTouch: (() => void) | null;\n  emptyCellContextMenu: (() => void) | null;\n  emptyCellDrop: (() => void) | null;\n  emptyCellDrag: (() => void) | null;\n  emptyCellDragTouch: (() => void) | null;\n  emptyCellMMove: () => void;\n  emptyCellMMoveTouch: () => void;\n  emptyCellUp: () => void;\n  emptyCellUpTouch: () => void;\n  emptyCellMove: (() => void) | null;\n  emptyCellExit: (() => void) | null;\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    // @ts-ignore\n    delete this.initialItem;\n    // @ts-ignore\n    delete this.gridster.movingItem;\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    }\n    // @ts-ignore\n    delete this.gridster;\n    if (this.emptyCellExit) {\n      this.emptyCellExit();\n      this.emptyCellExit = null;\n    }\n  }\n\n  updateOptions(): void {\n    if (this.gridster.$options.enableEmptyCellClick && !this.emptyCellClick && this.gridster.options.emptyCellClickCallback) {\n      this.emptyCellClick = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb.bind(this));\n      this.emptyCellClickTouch = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellClick && this.emptyCellClick && this.emptyCellClickTouch) {\n      this.emptyCellClick();\n      this.emptyCellClickTouch();\n      this.emptyCellClick = null;\n      this.emptyCellClickTouch = null;\n    }\n    if (this.gridster.$options.enableEmptyCellContextMenu && !this.emptyCellContextMenu &&\n      this.gridster.options.emptyCellContextMenuCallback) {\n      this.emptyCellContextMenu = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellContextMenu && this.emptyCellContextMenu) {\n      this.emptyCellContextMenu();\n      this.emptyCellContextMenu = null;\n    }\n    if (this.gridster.$options.enableEmptyCellDrop && !this.emptyCellDrop && this.gridster.options.emptyCellDropCallback) {\n      this.emptyCellDrop = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop.bind(this));\n      this.gridster.zone.runOutsideAngular(() => {\n        this.emptyCellMove = this.gridster.renderer.listen(this.gridster.el, 'dragover', this.emptyCellDragOver.bind(this));\n      });\n      this.emptyCellExit = this.gridster.renderer.listen('document', 'dragend', () => {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      });\n    } else if (!this.gridster.$options.enableEmptyCellDrop && this.emptyCellDrop && this.emptyCellMove && this.emptyCellExit) {\n      this.emptyCellDrop();\n      this.emptyCellMove();\n      this.emptyCellExit();\n      this.emptyCellMove = null;\n      this.emptyCellDrop = null;\n      this.emptyCellExit = null;\n    }\n    if (this.gridster.$options.enableEmptyCellDrag && !this.emptyCellDrag && this.gridster.options.emptyCellDragCallback) {\n      this.emptyCellDrag = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown.bind(this));\n      this.emptyCellDragTouch = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown.bind(this));\n    } else if (!this.gridster.$options.enableEmptyCellDrag && this.emptyCellDrag && this.emptyCellDragTouch) {\n      this.emptyCellDrag();\n      this.emptyCellDragTouch();\n      this.emptyCellDrag = null;\n      this.emptyCellDragTouch = null;\n    }\n  }\n\n  emptyCellClickCb(e: MouseEvent): void {\n    if (!this.gridster || this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellClickCallback) {\n      this.gridster.options.emptyCellClickCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellContextMenuCb(e: MouseEvent): void {\n    if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellContextMenuCallback) {\n      this.gridster.options.emptyCellContextMenuCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellDragDrop(e: DragEvent): void {\n    const item = this.getValidItemFromEvent(e);\n    if (!item) {\n      return;\n    }\n    if (this.gridster.options.emptyCellDropCallback) {\n      this.gridster.options.emptyCellDropCallback(e, item);\n    }\n    this.gridster.cdRef.markForCheck();\n  }\n\n  emptyCellDragOver(e: DragEvent): void {\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    if (item) {\n      if (e.dataTransfer) {\n        e.dataTransfer.dropEffect = 'move';\n      }\n      this.gridster.movingItem = item;\n    } else {\n      if (e.dataTransfer) {\n        e.dataTransfer.dropEffect = 'none';\n      }\n      this.gridster.movingItem = null;\n    }\n    this.gridster.previewStyle();\n  }\n\n  emptyCellMouseDown(e: MouseEvent): void {\n    if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e);\n    const leftMouseButtonCode = 1;\n    if (!item || e.buttons !== leftMouseButtonCode) {\n      return;\n    }\n    this.initialItem = item;\n    this.gridster.movingItem = item;\n    this.gridster.previewStyle();\n    this.gridster.zone.runOutsideAngular(() => {\n      this.emptyCellMMove = this.gridster.renderer.listen('window', 'mousemove', this.emptyCellMouseMove.bind(this));\n      this.emptyCellMMoveTouch = this.gridster.renderer.listen('window', 'touchmove', this.emptyCellMouseMove.bind(this));\n    });\n    this.emptyCellUp = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp.bind(this));\n    this.emptyCellUpTouch = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp.bind(this));\n  }\n\n  emptyCellMouseMove(e: MouseEvent): void {\n    e.preventDefault();\n    e.stopPropagation();\n    const item = this.getValidItemFromEvent(e, this.initialItem);\n    if (!item) {\n      return;\n    }\n\n    this.gridster.movingItem = item;\n    this.gridster.previewStyle();\n  }\n\n  emptyCellMouseUp(e: MouseEvent): void {\n    this.emptyCellMMove();\n    this.emptyCellMMoveTouch();\n    this.emptyCellUp();\n    this.emptyCellUpTouch();\n    const item = this.getValidItemFromEvent(e, this.initialItem);\n    if (item) {\n      this.gridster.movingItem = item;\n    }\n    if (this.gridster.options.emptyCellDragCallback && this.gridster.movingItem) {\n      this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\n    }\n    setTimeout(() => {\n      this.initialItem = null;\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      }\n    });\n    this.gridster.cdRef.markForCheck();\n  }\n\n  getPixelsX(e: MouseEvent, rect: ClientRect): number {\n    const scale = this.gridster.options.scale;\n    if (scale) {\n      return (e.clientX - rect.left) / scale + this.gridster.el.scrollLeft - this.gridster.gridRenderer.getLeftMargin();\n    }\n    return e.clientX + this.gridster.el.scrollLeft - rect.left - this.gridster.gridRenderer.getLeftMargin();\n  }\n\n  getPixelsY(e: MouseEvent, rect: ClientRect): number {\n    const scale = this.gridster.options.scale;\n    if (scale) {\n      return (e.clientY - rect.top) / scale + this.gridster.el.scrollTop - this.gridster.gridRenderer.getTopMargin();\n    }\n    return e.clientY + this.gridster.el.scrollTop - rect.top - this.gridster.gridRenderer.getTopMargin();\n  }\n\n  getValidItemFromEvent(e: MouseEvent, oldItem?: GridsterItem | null): GridsterItem | undefined {\n    e.preventDefault();\n    e.stopPropagation();\n    GridsterUtils.checkTouchEvent(e);\n    const rect = this.gridster.el.getBoundingClientRect();\n    const x = this.getPixelsX(e, rect);\n    const y = this.getPixelsY(e, rect);\n    const item: GridsterItem = {\n      x: this.gridster.pixelsToPositionX(x, Math.floor, true),\n      y: this.gridster.pixelsToPositionY(y, Math.floor, true),\n      cols: this.gridster.$options.defaultItemCols,\n      rows: this.gridster.$options.defaultItemRows\n    };\n    if (oldItem) {\n      item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\n      item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\n      if (oldItem.x < item.x) {\n        item.x = oldItem.x;\n      } else if (oldItem.x - item.x > this.gridster.$options.emptyCellDragMaxCols - 1) {\n        item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\n      }\n      if (oldItem.y < item.y) {\n        item.y = oldItem.y;\n      } else if (oldItem.y - item.y > this.gridster.$options.emptyCellDragMaxRows - 1) {\n        item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\n      }\n    }\n    if (!this.gridster.$options.enableOccupiedCellDrop && this.gridster.checkCollision(item)) {\n      return;\n    }\n    return item;\n  }\n}\n","import {Renderer2} from '@angular/core';\n\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {DirTypes, GridType} from './gridsterConfig.interface';\nimport {GridsterItem} from './gridsterItem.interface';\n\nexport class GridsterRenderer {\n\n  constructor(private gridster: GridsterComponentInterface) {\n  }\n\n  destroy(): void {\n    // @ts-ignore\n    delete this.gridster;\n  }\n\n  updateItem(el: Element, item: GridsterItem, renderer: Renderer2): void {\n    if (this.gridster.mobile) {\n      this.clearCellPosition(renderer, el);\n      if (this.gridster.$options.keepFixedHeightInMobile) {\n        renderer.setStyle(el, 'height', ((item.rows - 1) *this.gridster.$options.margin + item.rows * this.gridster.$options.fixedRowHeight) + 'px');\n      } else {\n        renderer.setStyle(el, 'height', (item.rows * this.gridster.curWidth / item.cols) + 'px');\n      }\n      if (this.gridster.$options.keepFixedWidthInMobile) {\n        renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\n      } else {\n        renderer.setStyle(el, 'width', '');\n      }\n\n      renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\n      renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', '');\n    } else {\n      const x = Math.round(this.gridster.curColWidth * item.x);\n      const y = Math.round(this.gridster.curRowHeight * item.y);\n      const width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\n      const height = (this.gridster.curRowHeight * item.rows - this.gridster.$options.margin);\n      // set the cell style\n      this.setCellPosition(renderer, el, x, y);\n      renderer.setStyle(el, 'width', width + 'px');\n      renderer.setStyle(el, 'height', height + 'px');\n      let marginBottom: string | null = null;\n      let marginRight: string | null = null;\n      if (this.gridster.$options.outerMargin) {\n        if (this.gridster.rows === item.rows + item.y) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginBottom = this.gridster.$options.outerMarginBottom + 'px';\n          } else {\n            marginBottom = this.gridster.$options.margin + 'px';\n          }\n        }\n        if (this.gridster.columns === item.cols + item.x) {\n          if (this.gridster.$options.outerMarginBottom !== null) {\n            marginRight = this.gridster.$options.outerMarginRight + 'px';\n          } else {\n            marginRight = this.gridster.$options.margin + 'px';\n          }\n        }\n      }\n\n      renderer.setStyle(el, 'margin-bottom', marginBottom);\n      renderer.setStyle(el, DirTypes.LTR ? 'margin-right' : 'margin-left', marginRight);\n    }\n  }\n\n  updateGridster(): void {\n    let addClass = '';\n    let removeClass1 = '';\n    let removeClass2 = '';\n    let removeClass3 = '';\n    if (this.gridster.$options.gridType === GridType.Fit) {\n      addClass = GridType.Fit;\n      removeClass1 = GridType.ScrollVertical;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\n      this.gridster.curRowHeight = this.gridster.curColWidth * this.gridster.$options.rowHeightRatio;\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\n      const widthRatio = this.gridster.$options.rowHeightRatio;\n      const calWidthRatio = widthRatio >= 1 ? widthRatio : widthRatio + 1;\n      this.gridster.curColWidth = this.gridster.curRowHeight * calWidthRatio;\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.Fixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.Fixed;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.ScrollHorizontal;\n    } else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\n      this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollVertical;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollHorizontal;\n      removeClass3 = GridType.Fixed;\n    } else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\n      this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\n        (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n      addClass = GridType.ScrollHorizontal;\n      removeClass1 = GridType.Fit;\n      removeClass2 = GridType.ScrollVertical;\n      removeClass3 = GridType.Fixed;\n    }\n\n    if (this.gridster.mobile || this.gridster.$options.setGridSize && this.gridster.$options.gridType !== GridType.Fit) {\n      this.gridster.renderer.removeClass(this.gridster.el, addClass);\n    } else {\n      this.gridster.renderer.addClass(this.gridster.el, addClass);\n    }\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\n    this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\n  }\n\n  getGridColumnStyle(i: number): { [key: string]: string } {\n    return {\n      ...this.getLeftPosition(this.gridster.curColWidth * i),\n      width: this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.gridRows.length * this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    };\n  }\n\n  getGridRowStyle(i: number): { [key: string]: string } {\n    return {\n      ...this.getTopPosition(this.gridster.curRowHeight * i),\n      width: this.gridster.gridColumns.length * this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n      height: this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n    };\n  }\n\n  getLeftPosition(d: number): { left: string } | { transform: string } {\n    const dPosition = this.gridster.$options.dirType === DirTypes.RTL ? -d : d;\n    if (this.gridster.$options.useTransformPositioning) {\n      return {\n        transform: 'translateX(' + dPosition + 'px)',\n      };\n    } else {\n      return {\n        left: (this.getLeftMargin() + dPosition) + 'px'\n      };\n    }\n  }\n\n  getTopPosition(d: number): { top: string } | { transform: string } {\n    if (this.gridster.$options.useTransformPositioning) {\n      return {\n        transform: 'translateY(' + d + 'px)',\n      };\n    } else {\n      return {\n        top: this.getTopMargin() + d + 'px'\n      };\n    }\n  }\n\n  clearCellPosition(renderer: Renderer2, el: Element): void {\n    if (this.gridster.$options.useTransformPositioning) {\n      renderer.setStyle(el, 'transform', '');\n    } else {\n      renderer.setStyle(el, 'top', '');\n      renderer.setStyle(el, 'left', '');\n    }\n  }\n\n  setCellPosition(renderer: Renderer2, el: Element, x: number, y: number): void {\n    const xPosition = this.gridster.$options.dirType === DirTypes.RTL ? -x : x;\n    if (this.gridster.$options.useTransformPositioning) {\n      const transform = 'translate3d(' + xPosition + 'px, ' + y + 'px, 0)';\n      renderer.setStyle(el, 'transform', transform);\n    } else {\n      renderer.setStyle(el, 'left', this.getLeftMargin() + xPosition + 'px');\n      renderer.setStyle(el, 'top', this.getTopMargin() + y + 'px');\n    }\n  }\n\n  getLeftMargin(): number {\n    if (this.gridster.$options.outerMargin) {\n      if (this.gridster.$options.outerMarginLeft !== null) {\n        return this.gridster.$options.outerMarginLeft;\n      } else {\n        return this.gridster.$options.margin;\n      }\n    } else {\n      return 0;\n    }\n  }\n\n  getTopMargin(): number {\n    if (this.gridster.$options.outerMargin) {\n      if (this.gridster.$options.outerMarginTop !== null) {\n        return this.gridster.$options.outerMarginTop;\n      } else {\n        return this.gridster.$options.margin;\n      }\n    } else {\n      return 0;\n    }\n  }\n}\n","import {\n  ChangeDetectorRef,\n  Component,\n  ElementRef,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {GridsterCompact} from './gridsterCompact.service';\n\nimport {GridsterConfigService} from './gridsterConfig.constant';\nimport {GridsterConfig, GridType} from './gridsterConfig.interface';\nimport {GridsterConfigS} from './gridsterConfigS.interface';\nimport {GridsterEmptyCell} from './gridsterEmptyCell.service';\nimport {GridsterItem, GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {GridsterRenderer} from './gridsterRenderer.service';\nimport {GridsterUtils} from './gridsterUtils.service';\n\n@Component({\n  // tslint:disable-next-line:component-selector\n  selector: 'gridster',\n  templateUrl: './gridster.html',\n  styleUrls: ['./gridster.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterComponent implements OnInit, OnChanges, OnDestroy, GridsterComponentInterface {\n  @Input() options: GridsterConfig;\n  calculateLayoutDebounce: () => void;\n  movingItem: GridsterItem | null;\n  previewStyle: () => void;\n  el: HTMLElement;\n  $options: GridsterConfigS;\n  mobile: boolean;\n  curWidth: number;\n  curHeight: number;\n  grid: GridsterItemComponentInterface[];\n  columns = 0;\n  rows = 0;\n  curColWidth: number;\n  curRowHeight: number;\n  gridColumns = [];\n  gridRows = [];\n  windowResize: (() => void) | null;\n  dragInProgress: boolean;\n  emptyCell: GridsterEmptyCell;\n  compact: GridsterCompact;\n  gridRenderer: GridsterRenderer;\n\n  constructor(@Inject(ElementRef) el: ElementRef, @Inject(Renderer2) public renderer: Renderer2,\n              @Inject(ChangeDetectorRef) public cdRef: ChangeDetectorRef,\n              @Inject(NgZone) public zone: NgZone) {\n    this.el = el.nativeElement;\n    this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n    this.calculateLayoutDebounce = GridsterUtils.debounce(this.calculateLayout.bind(this), 0);\n    this.mobile = false;\n    this.curWidth = 0;\n    this.curHeight = 0;\n    this.grid = [];\n    this.curColWidth = 0;\n    this.curRowHeight = 0;\n    this.dragInProgress = false;\n    this.emptyCell = new GridsterEmptyCell(this);\n    this.compact = new GridsterCompact(this);\n    this.gridRenderer = new GridsterRenderer(this);\n  }\n\n  // ------ Function for swapWhileDragging option\n\n  // identical to checkCollision() except that here we add boundaries.\n  static checkCollisionTwoItemsForSwaping(item: GridsterItem, item2: GridsterItem): boolean {\n    // if the cols or rows of the items are 1 , doesnt make any sense to set a boundary. Only if the item is bigger we set a boundary\n    const horizontalBoundaryItem1 = item.cols === 1 ? 0 : 1;\n    const horizontalBoundaryItem2 = item2.cols === 1 ? 0 : 1;\n    const verticalBoundaryItem1 = item.rows === 1 ? 0 : 1;\n    const verticalBoundaryItem2 = item2.rows === 1 ? 0 : 1;\n    return item.x + horizontalBoundaryItem1 < item2.x + item2.cols\n      && item.x + item.cols > item2.x + horizontalBoundaryItem2\n      && item.y + verticalBoundaryItem1 < item2.y + item2.rows\n      && item.y + item.rows > item2.y + verticalBoundaryItem2;\n  }\n\n  checkCollisionTwoItems(item: GridsterItem, item2: GridsterItem): boolean {\n    const collision = item.x < item2.x + item2.cols\n      && item.x + item.cols > item2.x\n      && item.y < item2.y + item2.rows\n      && item.y + item.rows > item2.y;\n    if (!collision) {\n      return false;\n    }\n    if (!this.$options.allowMultiLayer) {\n      return true;\n    }\n    const defaultLayerIndex = this.$options.defaultLayerIndex;\n    const layerIndex = item.layerIndex === undefined ? defaultLayerIndex : item.layerIndex;\n    const layerIndex2 = item2.layerIndex === undefined ? defaultLayerIndex : item2.layerIndex;\n    return layerIndex === layerIndex2;\n  }\n\n  ngOnInit(): void {\n    if (this.options.initCallback) {\n      this.options.initCallback(this);\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.options) {\n      this.setOptions();\n      this.options.api = {\n        optionsChanged: this.optionsChanged.bind(this),\n        resize: this.onResize.bind(this),\n        getNextPossiblePosition: this.getNextPossiblePosition.bind(this),\n        getFirstPossiblePosition: this.getFirstPossiblePosition.bind(this),\n        getLastPossiblePosition: this.getLastPossiblePosition.bind(this),\n        getItemComponent: (item: GridsterItem) => this.getItemComponent(item)\n      };\n      this.columns = this.$options.minCols;\n      this.rows = this.$options.minRows;\n      this.setGridSize();\n      this.calculateLayout();\n    }\n  }\n\n  resize(): void {\n    let height;\n    let width;\n    if (this.$options.gridType === 'fit' && !this.mobile) {\n      width = this.el.offsetWidth;\n      height = this.el.offsetHeight;\n    } else {\n      width = this.el.clientWidth;\n      height = this.el.clientHeight;\n    }\n    if ((width !== this.curWidth || height !== this.curHeight) && this.checkIfToResize()) {\n      this.onResize();\n    }\n  }\n\n  setOptions(): void {\n    this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\n    if (!this.$options.disableWindowResize && !this.windowResize) {\n      this.windowResize = this.renderer.listen('window', 'resize', this.onResize.bind(this));\n    } else if (this.$options.disableWindowResize && this.windowResize) {\n      this.windowResize();\n      this.windowResize = null;\n    }\n    this.emptyCell.updateOptions();\n  }\n\n  optionsChanged(): void {\n    this.setOptions();\n    let widgetsIndex: number = this.grid.length - 1;\n    let widget: GridsterItemComponentInterface;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      widget.updateOptions();\n    }\n    this.calculateLayout();\n  }\n\n  ngOnDestroy(): void {\n    if (this.windowResize) {\n      this.windowResize();\n    }\n    if (this.options && this.options.destroyCallback) {\n      this.options.destroyCallback(this);\n    }\n    if (this.options && this.options.api) {\n      this.options.api.resize = undefined;\n      this.options.api.optionsChanged = undefined;\n      this.options.api.getNextPossiblePosition = undefined;\n      this.options.api = undefined;\n    }\n    this.emptyCell.destroy();\n    // @ts-ignore\n    delete this.emptyCell;\n    this.compact.destroy();\n    // @ts-ignore\n    delete this.compact;\n  }\n\n  onResize(): void {\n    if (this.options.setGridSize) { // reset width/height so the size is recalculated afterwards\n      this.renderer.setStyle(this.el, 'width', '');\n      this.renderer.setStyle(this.el, 'height', '');\n    }\n    this.setGridSize();\n    this.calculateLayout();\n  }\n\n  checkIfToResize(): boolean {\n    const clientWidth = this.el.clientWidth;\n    const offsetWidth = this.el.offsetWidth;\n    const scrollWidth = this.el.scrollWidth;\n    const clientHeight = this.el.clientHeight;\n    const offsetHeight = this.el.offsetHeight;\n    const scrollHeight = this.el.scrollHeight;\n    const verticalScrollPresent = clientWidth < offsetWidth && scrollHeight > offsetHeight\n      && scrollHeight - offsetHeight < offsetWidth - clientWidth;\n    const horizontalScrollPresent = clientHeight < offsetHeight\n      && scrollWidth > offsetWidth && scrollWidth - offsetWidth < offsetHeight - clientHeight;\n    if (verticalScrollPresent) {\n      return false;\n    }\n    return !horizontalScrollPresent;\n  }\n\n  setGridSize(): void {\n    const el = this.el;\n    let width;\n    let height;\n    if (this.$options.setGridSize || this.$options.gridType === GridType.Fit && !this.mobile) {\n      width = el.offsetWidth;\n      height = el.offsetHeight;\n    } else {\n      width = el.clientWidth;\n      height = el.clientHeight;\n    }\n    this.curWidth = width;\n    this.curHeight = height;\n  }\n\n  setGridDimensions(): void {\n    this.setGridSize();\n    if (!this.mobile && this.$options.mobileBreakpoint > this.curWidth) {\n      this.mobile = !this.mobile;\n      this.renderer.addClass(this.el, 'mobile');\n    } else if (this.mobile && this.$options.mobileBreakpoint < this.curWidth) {\n      this.mobile = !this.mobile;\n      this.renderer.removeClass(this.el, 'mobile');\n    }\n    let rows = this.$options.minRows;\n    let columns = this.$options.minCols;\n\n    let widgetsIndex = this.grid.length - 1;\n    let widget;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (!widget.notPlaced) {\n        rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n        columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n      }\n    }\n\n    if (this.columns !== columns || this.rows !== rows) {\n      this.columns = columns;\n      this.rows = rows;\n      if (this.options.gridSizeChangedCallback) {\n        this.options.gridSizeChangedCallback(this);\n      }\n    }\n  }\n\n  calculateLayout(): void {\n    if (this.compact) {\n      this.compact.checkCompact();\n    }\n\n    this.setGridDimensions();\n    if (this.$options.outerMargin) {\n      let marginWidth = -this.$options.margin;\n      if (this.$options.outerMarginLeft !== null) {\n        marginWidth += this.$options.outerMarginLeft;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\n      }\n      if (this.$options.outerMarginRight !== null) {\n        marginWidth += this.$options.outerMarginRight;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\n      } else {\n        marginWidth += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\n      }\n      this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n      let marginHeight = -this.$options.margin;\n      if (this.$options.outerMarginTop !== null) {\n        marginHeight += this.$options.outerMarginTop;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\n      }\n      if (this.$options.outerMarginBottom !== null) {\n        marginHeight += this.$options.outerMarginBottom;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\n      } else {\n        marginHeight += this.$options.margin;\n        this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\n      }\n      this.curRowHeight = ((this.curHeight - marginHeight) / this.rows) * this.$options.rowHeightRatio;\n    } else {\n      this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n      this.curRowHeight = ((this.curHeight + this.$options.margin) / this.rows) * this.$options.rowHeightRatio;\n      this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n      this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n    }\n    this.gridRenderer.updateGridster();\n\n    if (this.$options.setGridSize) {\n      this.renderer.addClass(this.el, 'gridSize');\n      if (!this.mobile) {\n        this.renderer.setStyle(this.el, 'width', (this.columns * this.curColWidth + this.$options.margin) + 'px');\n        this.renderer.setStyle(this.el, 'height', (this.rows * this.curRowHeight + this.$options.margin) + 'px');\n      }\n    } else {\n      this.renderer.removeClass(this.el, 'gridSize');\n      this.renderer.setStyle(this.el, 'width', '');\n      this.renderer.setStyle(this.el, 'height', '');\n    }\n    this.updateGrid();\n\n    let widgetsIndex: number = this.grid.length - 1;\n    let widget: GridsterItemComponentInterface;\n    for (; widgetsIndex >= 0; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      widget.setSize();\n      widget.drag.toggle();\n      widget.resize.toggle();\n    }\n\n    setTimeout(this.resize.bind(this), 100);\n  }\n\n  updateGrid(): void {\n    if (this.$options.displayGrid === 'always' && !this.mobile) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'onDrag&Resize' && this.dragInProgress) {\n      this.renderer.addClass(this.el, 'display-grid');\n    } else if (this.$options.displayGrid === 'none' || !this.dragInProgress || this.mobile) {\n      this.renderer.removeClass(this.el, 'display-grid');\n    }\n    this.setGridDimensions();\n    this.gridColumns.length = GridsterComponent.getNewArrayLength(this.columns, this.curWidth, this.curColWidth);\n    this.gridRows.length = GridsterComponent.getNewArrayLength(this.rows, this.curHeight, this.curRowHeight);\n    this.cdRef.markForCheck();\n  }\n\n  addItem(itemComponent: GridsterItemComponentInterface): void {\n    if (itemComponent.$item.cols === undefined) {\n      itemComponent.$item.cols = this.$options.defaultItemCols;\n      itemComponent.item.cols = itemComponent.$item.cols;\n      itemComponent.itemChanged();\n    }\n    if (itemComponent.$item.rows === undefined) {\n      itemComponent.$item.rows = this.$options.defaultItemRows;\n      itemComponent.item.rows = itemComponent.$item.rows;\n      itemComponent.itemChanged();\n    }\n    if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n      this.autoPositionItem(itemComponent);\n    } else if (this.checkCollision(itemComponent.$item)) {\n      if (!this.$options.disableWarnings) {\n        itemComponent.notPlaced = true;\n        console.warn('Can\\'t be placed in the bounds of the dashboard, trying to auto position!/n' +\n          JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n      if (!this.$options.disableAutoPositionOnConflict) {\n        this.autoPositionItem(itemComponent);\n      } else {\n        itemComponent.notPlaced = true;\n      }\n    }\n    this.grid.push(itemComponent);\n    this.calculateLayoutDebounce();\n  }\n\n  removeItem(itemComponent: GridsterItemComponentInterface): void {\n    this.grid.splice(this.grid.indexOf(itemComponent), 1);\n    this.calculateLayoutDebounce();\n    if (this.options.itemRemovedCallback) {\n      this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n    }\n  }\n\n  checkCollision(item: GridsterItem): GridsterItemComponentInterface | boolean {\n    let collision: GridsterItemComponentInterface | boolean = false;\n    if (this.options.itemValidateCallback) {\n      collision = !this.options.itemValidateCallback(item);\n    }\n    if (!collision && this.checkGridCollision(item)) {\n      collision = true;\n    }\n    if (!collision) {\n      const c = this.findItemWithItem(item);\n      if (c) {\n        collision = c;\n      }\n    }\n    return collision;\n  }\n\n  checkGridCollision(item: GridsterItem): boolean {\n    const noNegativePosition = item.y > -1 && item.x > -1;\n    const maxGridCols = item.cols + item.x <= this.$options.maxCols;\n    const maxGridRows = item.rows + item.y <= this.$options.maxRows;\n    const maxItemCols = item.maxItemCols === undefined ? this.$options.maxItemCols : item.maxItemCols;\n    const minItemCols = item.minItemCols === undefined ? this.$options.minItemCols : item.minItemCols;\n    const maxItemRows = item.maxItemRows === undefined ? this.$options.maxItemRows : item.maxItemRows;\n    const minItemRows = item.minItemRows === undefined ? this.$options.minItemRows : item.minItemRows;\n    const inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n    const inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n    const minAreaLimit = item.minItemArea === undefined ? this.$options.minItemArea : item.minItemArea;\n    const maxAreaLimit = item.maxItemArea === undefined ? this.$options.maxItemArea : item.maxItemArea;\n    const area = item.cols * item.rows;\n    const inMinArea = minAreaLimit <= area;\n    const inMaxArea = maxAreaLimit >= area;\n    return !(noNegativePosition && maxGridCols && maxGridRows && inColsLimits && inRowsLimits && inMinArea && inMaxArea);\n  }\n\n  findItemWithItem(item: GridsterItem): GridsterItemComponentInterface | boolean {\n    let widgetsIndex = 0;\n    let widget: GridsterItemComponentInterface;\n    for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n      widget = this.grid[widgetsIndex];\n      if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\n        return widget;\n      }\n    }\n    return false;\n  }\n\n  findItemsWithItem(item: GridsterItem): Array<GridsterItemComponentInterface> {\n    const a: Array<GridsterItemComponentInterface> = [];\n    let widgetsIndex = 0;\n    let widget: GridsterItemComponentInterface;\n    for (; widgetsIndex < this.grid.length; widgetsIndex++) {\n      widget = this.grid[widgetsIndex];\n      if (widget.$item !== item && this.checkCollisionTwoItems(widget.$item, item)) {\n        a.push(widget);\n      }\n    }\n    return a;\n  }\n\n  autoPositionItem(itemComponent: GridsterItemComponentInterface): void {\n    if (this.getNextPossiblePosition(itemComponent.$item)) {\n      itemComponent.notPlaced = false;\n      itemComponent.item.x = itemComponent.$item.x;\n      itemComponent.item.y = itemComponent.$item.y;\n      itemComponent.itemChanged();\n    } else {\n      itemComponent.notPlaced = true;\n      if (!this.$options.disableWarnings) {\n        console.warn('Can\\'t be placed in the bounds of the dashboard!/n' +\n          JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n      }\n    }\n  }\n\n  getNextPossiblePosition(newItem: GridsterItem, startingFrom: { y?: number, x?: number } = {}): boolean {\n    if (newItem.cols === -1) {\n      newItem.cols = this.$options.defaultItemCols;\n    }\n    if (newItem.rows === -1) {\n      newItem.rows = this.$options.defaultItemRows;\n    }\n    this.setGridDimensions();\n    let rowsIndex = startingFrom.y || 0;\n    let colsIndex;\n    for (; rowsIndex < this.rows; rowsIndex++) {\n      newItem.y = rowsIndex;\n      colsIndex = startingFrom.x || 0;\n      for (; colsIndex < this.columns; colsIndex++) {\n        newItem.x = colsIndex;\n        if (!this.checkCollision(newItem)) {\n          return true;\n        }\n      }\n    }\n    const canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n    const canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\n    const addToRows = this.rows <= this.columns && canAddToRows;\n    if (!addToRows && canAddToColumns) {\n      newItem.x = this.columns;\n      newItem.y = 0;\n      return true;\n    } else if (canAddToRows) {\n      newItem.y = this.rows;\n      newItem.x = 0;\n      return true;\n    }\n    return false;\n  }\n\n  getFirstPossiblePosition(item: GridsterItem): GridsterItem {\n    const tmpItem = Object.assign({}, item);\n    this.getNextPossiblePosition(tmpItem);\n    return tmpItem;\n  }\n\n  getLastPossiblePosition(item: GridsterItem): GridsterItem {\n    let farthestItem: { y: number, x: number } = {y: 0, x: 0};\n    farthestItem = this.grid.reduce((prev: { y: number, x: number }, curr: GridsterItemComponentInterface) => {\n      const currCoords = {y: curr.$item.y + curr.$item.rows - 1, x: curr.$item.x + curr.$item.cols - 1};\n      if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n        return currCoords;\n      } else {\n        return prev;\n      }\n    }, farthestItem);\n\n    const tmpItem = Object.assign({}, item);\n    this.getNextPossiblePosition(tmpItem, farthestItem);\n    return tmpItem;\n  }\n\n  pixelsToPositionX(x: number, roundingMethod: (x: number) => number, noLimit?: boolean): number {\n    const position = roundingMethod(x / this.curColWidth);\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n\n  pixelsToPositionY(y: number, roundingMethod: (x: number) => number, noLimit?: boolean): number {\n    const position = roundingMethod(y / this.curRowHeight);\n    if (noLimit) {\n      return position;\n    } else {\n      return Math.max(position, 0);\n    }\n  }\n\n  positionXToPixels(x: number): number {\n    return x * this.curColWidth;\n  }\n\n  positionYToPixels(y: number): number {\n    return y * this.curRowHeight;\n  }\n\n  getItemComponent(item: GridsterItem): GridsterItemComponentInterface | undefined {\n    return this.grid.find(c => c.item === item);\n  }\n\n  // ------ Functions for swapWhileDragging option\n\n  // identical to checkCollision() except that this function calls findItemWithItemForSwaping() instead of findItemWithItem()\n  checkCollisionForSwaping(item: GridsterItem): GridsterItemComponentInterface | boolean {\n    let collision: GridsterItemComponentInterface | boolean = false;\n    if (this.options.itemValidateCallback) {\n      collision = !this.options.itemValidateCallback(item);\n    }\n    if (!collision && this.checkGridCollision(item)) {\n      collision = true;\n    }\n    if (!collision) {\n      const c = this.findItemWithItemForSwaping(item);\n      if (c) {\n        collision = c;\n      }\n    }\n    return collision;\n  }\n\n  // identical to findItemWithItem() except that this function calls checkCollisionTwoItemsForSwaping() instead of checkCollisionTwoItems()\n  findItemWithItemForSwaping(item: GridsterItem): GridsterItemComponentInterface | boolean {\n    let widgetsIndex: number = this.grid.length - 1;\n    let widget: GridsterItemComponentInterface;\n    for (; widgetsIndex > -1; widgetsIndex--) {\n      widget = this.grid[widgetsIndex];\n      if (widget.$item !== item && GridsterComponent.checkCollisionTwoItemsForSwaping(widget.$item, item)) {\n        return widget;\n      }\n    }\n    return false;\n  }\n\n  // ------ End of functions for swapWhileDragging option\n\n  // tslint:disable-next-line:member-ordering\n  private static getNewArrayLength(length: number, overallSize: number, size: number): number {\n    const newLength = Math.max(length, Math.floor(overallSize / size));\n\n    if (newLength < 0) {\n      return 0;\n    }\n\n    if (Number.isFinite(newLength)) {\n      return Math.floor(newLength);\n    }\n\n    return 0;\n  }\n}\n","import {GridsterResizeEventType} from './gridsterResizeEventType.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nlet scrollSensitivity: number;\nlet scrollSpeed: number;\nconst intervalDuration = 50;\nlet gridsterElement: HTMLElement | null;\nlet resizeEvent: boolean | undefined;\nlet resizeEventType: GridsterResizeEventType | undefined;\nlet intervalE: number;\nlet intervalW: number;\nlet intervalN: number;\nlet intervalS: number;\n\ninterface Position {\n  clientX: number;\n  clientY: number;\n}\n\ntype CalculatePosition = (position: Position) => void;\n\nexport function scroll(gridster: GridsterComponentInterface, left: number, top: number, width: number, height: number,\n                       e: MouseEvent, lastMouse: Position,\n                       calculateItemPosition: CalculatePosition, resize?: boolean, resizeEventScrollType?: GridsterResizeEventType): void {\n  scrollSensitivity = gridster.$options.scrollSensitivity;\n  scrollSpeed = gridster.$options.scrollSpeed;\n  gridsterElement = gridster.el;\n  resizeEvent = resize;\n  resizeEventType = resizeEventScrollType;\n\n  const offsetWidth = gridsterElement.offsetWidth;\n  const offsetHeight = gridsterElement.offsetHeight;\n  const offsetLeft = gridsterElement.scrollLeft;\n  const offsetTop = gridsterElement.scrollTop;\n  const elemTopOffset = top - offsetTop;\n  const elemBottomOffset = offsetHeight + offsetTop - top - height;\n\n  if (!gridster.$options.disableScrollVertical) {\n    if (lastMouse.clientY < e.clientY && elemBottomOffset < scrollSensitivity) {\n      cancelN();\n      if ((resizeEvent && resizeEventType && !resizeEventType.s) || intervalS) {\n        return;\n      }\n      intervalS = startVertical(1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientY > e.clientY && offsetTop > 0 && elemTopOffset < scrollSensitivity) {\n      cancelS();\n      if ((resizeEvent && resizeEventType && !resizeEventType.n) || intervalN) {\n        return;\n      }\n      intervalN = startVertical(-1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientY !== e.clientY) {\n      cancelVertical();\n    }\n  }\n\n  const elemRightOffset = offsetLeft + offsetWidth - left - width;\n  const elemLeftOffset = left - offsetLeft;\n\n  if (!gridster.$options.disableScrollHorizontal) {\n    if (lastMouse.clientX < e.clientX && elemRightOffset <= scrollSensitivity) {\n      cancelW();\n      if ((resizeEvent && resizeEventType && !resizeEventType.e) || intervalE) {\n        return;\n      }\n      intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientX > e.clientX && offsetLeft > 0 && elemLeftOffset < scrollSensitivity) {\n      cancelE();\n      if ((resizeEvent && resizeEventType && !resizeEventType.w) || intervalW) {\n        return;\n      }\n      intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\n    } else if (lastMouse.clientX !== e.clientX) {\n      cancelHorizontal();\n    }\n  }\n}\n\nfunction startVertical(sign: number, calculateItemPosition: CalculatePosition, lastMouse: Position): number {\n  let clientY = lastMouse.clientY;\n  return setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0) {\n      cancelVertical();\n    }\n    // @ts-ignore\n    gridsterElement.scrollTop += sign * scrollSpeed;\n    clientY += sign * scrollSpeed;\n    calculateItemPosition({clientX: lastMouse.clientX, clientY});\n  }, intervalDuration);\n}\n\nfunction startHorizontal(sign: number, calculateItemPosition: CalculatePosition, lastMouse: Position): number {\n  let clientX = lastMouse.clientX;\n  return setInterval(() => {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0) {\n      cancelHorizontal();\n    }\n    // @ts-ignore\n    gridsterElement.scrollLeft += sign * scrollSpeed;\n    clientX += sign * scrollSpeed;\n    calculateItemPosition({clientX, clientY: lastMouse.clientY});\n  }, intervalDuration);\n}\n\nexport function cancelScroll(): void {\n  cancelHorizontal();\n  cancelVertical();\n  gridsterElement = null;\n}\n\nfunction cancelHorizontal(): void {\n  cancelE();\n  cancelW();\n}\n\nfunction cancelVertical(): void {\n  cancelN();\n  cancelS();\n}\n\nfunction cancelE(): void {\n  if (intervalE) {\n    clearInterval(intervalE);\n    intervalE = 0;\n  }\n}\n\nfunction cancelW(): void {\n  if (intervalW) {\n    clearInterval(intervalW);\n    intervalW = 0;\n  }\n}\n\nfunction cancelS(): void {\n  if (intervalS) {\n    clearInterval(intervalS);\n    intervalS = 0;\n  }\n}\n\nfunction cancelN(): void {\n  if (intervalN) {\n    clearInterval(intervalN);\n    intervalN = 0;\n  }\n}\n","import {GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nexport class GridsterPush {\n  public fromSouth: string;\n  public fromNorth: string;\n  public fromEast: string;\n  public fromWest: string;\n  private pushedItems: GridsterItemComponentInterface[];\n  private pushedItemsTemp: GridsterItemComponentInterface[];\n  private pushedItemsTempPath: { x: number, y: number }[][];\n  private pushedItemsPath: { x: number, y: number }[][];\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n  private pushedItemsOrder: GridsterItemComponentInterface[];\n  private tryPattern: {\n    fromEast: ((gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface) => boolean)[],\n    fromWest: ((gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface) => boolean)[],\n    fromNorth: ((gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface) => boolean)[],\n    fromSouth: ((gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface) => boolean)[]\n  };\n  private iteration = 0;\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.pushedItems = [];\n    this.pushedItemsTemp = [];\n    this.pushedItemsTempPath = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\n      fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\n      fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\n      fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy(): void {\n    // @ts-ignore\n    delete this.gridster;\n    // @ts-ignore\n    delete this.gridsterItem;\n  }\n\n  pushItems(direction: string, disable?: boolean): boolean {\n    if (this.gridster.$options.pushItems && !disable) {\n      this.pushedItemsOrder = [];\n      this.iteration = 0;\n      const pushed = this.push(this.gridsterItem, direction);\n      if (!pushed) {\n        this.restoreTempItems();\n      }\n      this.pushedItemsOrder = [];\n      this.pushedItemsTemp = [];\n      this.pushedItemsTempPath = [];\n      return pushed;\n    } else {\n      return false;\n    }\n  }\n\n  restoreTempItems(): void {\n    let i = this.pushedItemsTemp.length - 1;\n    for (; i > -1; i--) {\n      this.removeFromTempPushed(this.pushedItemsTemp[i]);\n    }\n  }\n\n  restoreItems(): void {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.setSize();\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems(): void {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack(): void {\n    let i: number = this.pushedItems.length - 1;\n    let change = false;\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  private push(gridsterItem: GridsterItemComponentInterface, direction: string): boolean {\n    if (this.iteration > 100) {\n      console.warn('max iteration reached');\n      return false;\n    }\n    if (this.gridster.checkGridCollision(gridsterItem.$item)) {\n      return false;\n    }\n    if (direction === '') {\n      return false;\n    }\n    const conflicts: GridsterItemComponentInterface[] = this.gridster.findItemsWithItem(gridsterItem.$item);\n    const invert = direction === this.fromNorth || direction === this.fromWest;\n    // sort the list of conflicts in order of [y,x]. Invert when the push is from north and west\n    // this is done so they don't conflict witch each other and revert positions, keeping the previous order\n    conflicts.sort((a, b) => {\n      if (invert) {\n        return b.$item.y - a.$item.y || b.$item.x - a.$item.x;\n      } else {\n        return a.$item.y - b.$item.y || a.$item.x - b.$item.x;\n      }\n\n    });\n    let i = 0;\n    let itemCollision: GridsterItemComponentInterface;\n    let makePush = true;\n    const pushedItems: GridsterItemComponentInterface[] = [];\n    for (; i < conflicts.length; i++) {\n      itemCollision = conflicts[i];\n      if (itemCollision === this.gridsterItem) {\n        continue;\n      }\n      if (!itemCollision.canBeDragged()) {\n        makePush = false;\n        break;\n      }\n      const p = this.pushedItemsTemp.indexOf(itemCollision);\n      if (p > -1 && this.pushedItemsTempPath[p].length > 10) { // stop if item is pushed more than 10 times to break infinite loops\n        makePush = false;\n        break;\n      }\n      if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\n        this.pushedItemsOrder.push(itemCollision);\n        pushedItems.push(itemCollision);\n      } else {\n        makePush = false;\n        break;\n      }\n    }\n    if (!makePush) {\n      i = this.pushedItemsOrder.lastIndexOf(pushedItems[0]);\n      if (i > -1) {\n        let j = this.pushedItemsOrder.length - 1;\n        for (; j >= i; j--) {\n          itemCollision = this.pushedItemsOrder[j];\n          this.pushedItemsOrder.pop();\n          this.removeFromTempPushed(itemCollision);\n          this.removeFromPushedItem(itemCollision);\n        }\n      }\n    }\n    this.iteration++;\n    return makePush;\n  }\n\n  private trySouth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.south) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    if (this.push(gridsterItemCollide, this.fromNorth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryNorth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.north) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.y = gridsterItem.$item.y - gridsterItemCollide.$item.rows;\n    if (this.push(gridsterItemCollide, this.fromSouth)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryEast(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.east) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    if (this.push(gridsterItemCollide, this.fromWest)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private tryWest(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface): boolean {\n    if (!this.gridster.$options.pushDirections.west) {\n      return false;\n    }\n    this.addToTempPushed(gridsterItemCollide);\n    gridsterItemCollide.$item.x = gridsterItem.$item.x - gridsterItemCollide.$item.cols;\n    if (this.push(gridsterItemCollide, this.fromEast)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      return true;\n    } else {\n      this.removeFromTempPushed(gridsterItemCollide);\n    }\n    return false;\n  }\n\n  private addToTempPushed(gridsterItem: GridsterItemComponentInterface): void {\n    let i = this.pushedItemsTemp.indexOf(gridsterItem);\n    if (i === -1) {\n      i = this.pushedItemsTemp.push(gridsterItem) - 1;\n      this.pushedItemsTempPath[i] = [];\n    }\n    this.pushedItemsTempPath[i].push({x: gridsterItem.$item.x, y: gridsterItem.$item.y});\n  }\n\n  private removeFromTempPushed(gridsterItem: GridsterItemComponentInterface): void {\n    const i = this.pushedItemsTemp.indexOf(gridsterItem);\n    const tempPosition = this.pushedItemsTempPath[i].pop();\n    if (!tempPosition) {\n      return;\n    }\n    gridsterItem.$item.x = tempPosition.x;\n    gridsterItem.$item.y = tempPosition.y;\n    gridsterItem.setSize();\n    if (!this.pushedItemsTempPath[i].length) {\n      this.pushedItemsTemp.splice(i, 1);\n      this.pushedItemsTempPath.splice(i, 1);\n    }\n  }\n\n  private addToPushed(gridsterItem: GridsterItemComponentInterface): void {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([{x: gridsterItem.item.x || 0, y: gridsterItem.item.y || 0},\n        {x: gridsterItem.$item.x, y: gridsterItem.$item.y}]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push({x: gridsterItem.$item.x, y: gridsterItem.$item.y});\n    }\n  }\n\n  private removeFromPushed(i: number): void {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  private removeFromPushedItem(gridsterItem: GridsterItemComponentInterface): void {\n    const i = this.pushedItems.indexOf(gridsterItem);\n    if (i > -1) {\n      this.pushedItemsPath[i].pop();\n      if (!this.pushedItemsPath.length) {\n        this.pushedItems.splice(i, 1);\n        this.pushedItemsPath.splice(i, 1);\n      }\n    }\n  }\n\n  private checkPushedItem(pushedItem: GridsterItemComponentInterface, i: number): boolean {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition;\n    let x;\n    let y;\n    let change = false;\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - j - 1);\n        change = true;\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n      }\n    }\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n    }\n    return change;\n  }\n}\n","import {GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nexport class GridsterSwap {\n  private swapedItem: GridsterItemComponentInterface | undefined;\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n  }\n\n  destroy(): void {\n    // @ts-ignore\n    delete this.gridster;\n    // @ts-ignore\n    delete this.gridsterItem;\n    delete this.swapedItem;\n  }\n\n  swapItems(): void {\n    if (this.gridster.$options.swap) {\n      this.checkSwapBack();\n      this.checkSwap(this.gridsterItem);\n    }\n  }\n\n  checkSwapBack(): void {\n    if (this.swapedItem) {\n      const x: number = this.swapedItem.$item.x;\n      const y: number = this.swapedItem.$item.y;\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      if (this.gridster.checkCollision(this.swapedItem.$item)) {\n        this.swapedItem.$item.x = x;\n        this.swapedItem.$item.y = y;\n      } else {\n        this.swapedItem.setSize();\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n        this.swapedItem = undefined;\n      }\n\n    }\n  }\n\n  restoreSwapItem(): void {\n    if (this.swapedItem) {\n      this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n      this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n      this.swapedItem.setSize();\n      this.swapedItem = undefined;\n    }\n  }\n\n  setSwapItem(): void {\n    if (this.swapedItem) {\n      this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\n      this.swapedItem = undefined;\n    }\n  }\n\n  checkSwap(pushedBy: GridsterItemComponentInterface): void {\n    let gridsterItemCollision;\n    if (this.gridster.$options.swapWhileDragging) {\n      gridsterItemCollision = this.gridster.checkCollisionForSwaping(pushedBy.$item);\n    } else {\n      gridsterItemCollision = this.gridster.checkCollision(pushedBy.$item);\n    }\n    if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision.canBeDragged()) {\n      const gridsterItemCollide: GridsterItemComponentInterface = gridsterItemCollision;\n      const copyCollisionX = gridsterItemCollide.$item.x;\n      const copyCollisionY = gridsterItemCollide.$item.y;\n      const copyX = pushedBy.$item.x;\n      const copyY = pushedBy.$item.y;\n      const diffX = copyX - copyCollisionX;\n      const diffY = copyY - copyCollisionY;\n      gridsterItemCollide.$item.x = pushedBy.item.x - diffX;\n      gridsterItemCollide.$item.y = pushedBy.item.y - diffY;\n      pushedBy.$item.x = gridsterItemCollide.item.x + diffX;\n      pushedBy.$item.y = gridsterItemCollide.item.y + diffY;\n      if (this.gridster.checkCollision(gridsterItemCollide.$item) || this.gridster.checkCollision(pushedBy.$item)) {\n        pushedBy.$item.x = copyX;\n        pushedBy.$item.y = copyY;\n        gridsterItemCollide.$item.x = copyCollisionX;\n        gridsterItemCollide.$item.y = copyCollisionY;\n      } else {\n        gridsterItemCollide.setSize();\n        this.swapedItem = gridsterItemCollide;\n        if (this.gridster.$options.swapWhileDragging) {\n          this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n          this.setSwapItem();\n        }\n      }\n    }\n  }\n}\n","import {NgZone} from '@angular/core';\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {DirTypes} from './gridsterConfig.interface';\nimport {GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {GridsterPush} from './gridsterPush.service';\nimport {cancelScroll, scroll} from './gridsterScroll.service';\n\nimport {GridsterSwap} from './gridsterSwap.service';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {MouseEvent2} from './gridsterResizeEventType.interface';\n\nexport class GridsterDraggable {\n  gridsterItem: GridsterItemComponentInterface;\n  gridster: GridsterComponentInterface;\n  lastMouse: {\n    clientX: number,\n    clientY: number\n  };\n  offsetLeft: number;\n  offsetTop: number;\n  margin: number;\n  diffTop: number;\n  diffLeft: number;\n  originalClientX: number;\n  originalClientY: number;\n  top: number;\n  left: number;\n  height: number;\n  width: number;\n  positionX: number;\n  positionY: number;\n  positionXBackup: number;\n  positionYBackup: number;\n  enabled: boolean;\n  dragStartFunction: (event: MouseEvent) => void;\n  dragFunction: (event: MouseEvent) => void;\n  dragStopFunction: (event: MouseEvent) => void;\n  mousemove: () => void;\n  mouseup: () => void;\n  mouseleave: () => void;\n  cancelOnBlur: () => void;\n  touchmove: () => void;\n  touchend: () => void;\n  touchcancel: () => void;\n  mousedown: () => void;\n  touchstart: () => void;\n  push: GridsterPush;\n  swap: GridsterSwap;\n  path: Array<{ x: number, y: number }>;\n  collision: GridsterItemComponentInterface | boolean = false;\n\n  constructor(gridsterItem: GridsterItemComponentInterface, gridster: GridsterComponentInterface, private zone: NgZone) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.path = [];\n  }\n\n  destroy(): void {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle(true);\n    }\n    // @ts-ignore\n    delete this.gridsterItem;\n    // @ts-ignore\n    delete this.gridster;\n    // @ts-ignore\n    delete this.collision;\n    if (this.mousedown) {\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n\n  dragStart(e: MouseEvent): void {\n    if (e.which && e.which !== 1) {\n      return;\n    }\n\n    if (this.gridster.options.draggable && this.gridster.options.draggable.start) {\n      this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n\n    e.stopPropagation();\n    e.preventDefault();\n    this.dragFunction = this.dragMove.bind(this);\n    this.dragStopFunction = this.dragStop.bind(this);\n\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.left = this.gridsterItem.left - this.margin;\n    this.top = this.gridsterItem.top - this.margin;\n    this.originalClientX = e.clientX;\n    this.originalClientY = e.clientY;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.diffLeft = (e.clientX - this.gridster.el.scrollWidth + this.gridsterItem.left);\n    } else {\n      this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\n    }\n    this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle(true);\n    this.push = new GridsterPush(this.gridsterItem);\n    this.swap = new GridsterSwap(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n    this.path.push({x: this.gridsterItem.item.x || 0, y: this.gridsterItem.item.y || 0});\n  }\n\n  dragMove(e: MouseEvent): void {\n    e.stopPropagation();\n    e.preventDefault();\n    GridsterUtils.checkTouchEvent(e);\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse,\n      this.calculateItemPositionFromMousePosition.bind(this));\n\n    this.calculateItemPositionFromMousePosition(e);\n  }\n\n  calculateItemPositionFromMousePosition(e: MouseEvent): void {\n    if (this.gridster.options.scale) {\n      this.calculateItemPositionWithScale(e, this.gridster.options.scale);\n    } else {\n      this.calculateItemPositionWithoutScale(e);\n    }\n    this.calculateItemPosition();\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.zone.run(() => {\n      this.gridster.updateGrid();\n    });\n  }\n\n  calculateItemPositionWithScale(e: MouseEvent, scale: number): void {\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.left = this.gridster.el.scrollWidth - this.originalClientX + ((e.clientX - this.originalClientX) / scale) + this.diffLeft;\n    } else {\n      this.left = this.originalClientX + ((e.clientX - this.originalClientX) / scale) + this.offsetLeft - this.diffLeft;\n    }\n    this.top = this.originalClientY + ((e.clientY - this.originalClientY) / scale) + this.offsetTop - this.diffTop;\n  }\n\n  calculateItemPositionWithoutScale(e: MouseEvent): void {\n    if (this.gridster.$options.dirType === DirTypes.RTL) {\n      this.left = this.gridster.el.scrollWidth - e.clientX + this.diffLeft;\n    } else {\n      this.left = e.clientX + this.offsetLeft - this.diffLeft;\n    }\n\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n  }\n\n  dragStop(e: MouseEvent): void {\n    e.stopPropagation();\n    e.preventDefault();\n\n    cancelScroll();\n    this.cancelOnBlur();\n    this.mousemove();\n    this.mouseup();\n    this.mouseleave();\n    this.touchmove();\n    this.touchend();\n    this.touchcancel();\n    this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\n    this.gridster.dragInProgress = false;\n    this.gridster.updateGrid();\n    this.path = [];\n    if (this.gridster.options.draggable && this.gridster.options.draggable.stop) {\n      Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e))\n        .then(this.makeDrag.bind(this), this.cancelDrag.bind(this));\n    } else {\n      this.makeDrag();\n    }\n    setTimeout(() => {\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle(true);\n      }\n    });\n  }\n\n  cancelDrag(): void {\n    this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n    this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n    this.gridsterItem.setSize();\n    if (this.push) {\n      this.push.restoreItems();\n    }\n    if (this.swap) {\n      this.swap.restoreSwapItem();\n    }\n    if (this.push) {\n      this.push.destroy();\n      // @ts-ignore\n      delete this.push;\n    }\n    if (this.swap) {\n      this.swap.destroy();\n      // @ts-ignore\n      delete this.swap;\n    }\n  }\n\n  makeDrag(): void {\n    if (this.gridster.$options.draggable.dropOverItems && this.gridster.options.draggable\n      && this.gridster.options.draggable.dropOverItemsCallback\n      && this.collision && this.collision !== true && this.collision.$item) {\n      this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\n    }\n    this.collision = false;\n    this.gridsterItem.setSize();\n    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n    if (this.push) {\n      this.push.setPushedItems();\n    }\n    if (this.swap) {\n      this.swap.setSwapItem();\n    }\n    if (this.push) {\n      this.push.destroy();\n      // @ts-ignore\n      delete this.push;\n    }\n    if (this.swap) {\n      this.swap.destroy();\n      // @ts-ignore\n      delete this.swap;\n    }\n  }\n\n  calculateItemPosition(): void {\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\n    this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\n    this.positionXBackup = this.gridsterItem.$item.x;\n    this.positionYBackup = this.gridsterItem.$item.y;\n    this.gridsterItem.$item.x = this.positionX;\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.x = this.positionXBackup;\n    }\n    this.gridsterItem.$item.y = this.positionY;\n    if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n      this.gridsterItem.$item.y = this.positionYBackup;\n    }\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, this.top);\n\n    if (this.positionXBackup !== this.gridsterItem.$item.x || this.positionYBackup !== this.gridsterItem.$item.y) {\n      const lastPosition = this.path[this.path.length - 1];\n      let direction = '';\n      if (lastPosition.x < this.gridsterItem.$item.x) {\n        direction = this.push.fromWest;\n      } else if (lastPosition.x > this.gridsterItem.$item.x) {\n        direction = this.push.fromEast;\n      } else if (lastPosition.y < this.gridsterItem.$item.y) {\n        direction = this.push.fromNorth;\n      } else if (lastPosition.y > this.gridsterItem.$item.y) {\n        direction = this.push.fromSouth;\n      }\n      this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\n      this.swap.swapItems();\n      this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\n      if (this.collision) {\n        this.gridsterItem.$item.x = this.positionXBackup;\n        this.gridsterItem.$item.y = this.positionYBackup;\n        if (this.gridster.$options.draggable.dropOverItems && this.collision !== true && this.collision.$item) {\n          this.gridster.movingItem = null;\n        }\n      } else {\n        this.path.push({x: this.gridsterItem.$item.x, y: this.gridsterItem.$item.y});\n      }\n      this.push.checkPushBack();\n    }\n    this.gridster.previewStyle(true);\n  }\n\n  toggle(): void {\n    const enableDrag = this.gridsterItem.canBeDragged();\n    if (!this.enabled && enableDrag) {\n      this.enabled = !this.enabled;\n      this.dragStartFunction = this.dragStartDelay.bind(this);\n      this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartFunction);\n      this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartFunction);\n    } else if (this.enabled && !enableDrag) {\n      this.enabled = !this.enabled;\n      this.mousedown();\n      this.touchstart();\n    }\n  }\n\n  dragStartDelay(e: MouseEvent2): void {\n    if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('gridster-item-resizable-handler') > -1) {\n      return;\n    }\n    if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\n      return;\n    }\n    GridsterUtils.checkTouchEvent(e);\n    if (!this.gridster.$options.draggable.delayStart) {\n      this.dragStart(e);\n      return;\n    }\n    const timeout = setTimeout(() => {\n      this.dragStart(e);\n      cancelDrag();\n    }, this.gridster.$options.draggable.delayStart);\n    const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n    const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n    const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n    const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n    const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n    const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n\n    function cancelMove(eventMove: MouseEvent): void {\n      GridsterUtils.checkTouchEvent(eventMove);\n      if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n        cancelDrag();\n      }\n    }\n\n    function cancelDrag(): void {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelMouseLeave();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n}\n","import {GridsterItem, GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nexport class GridsterPushResize {\n  public fromSouth: string;\n  public fromNorth: string;\n  public fromEast: string;\n  public fromWest: string;\n  private pushedItems: Array<GridsterItemComponentInterface>;\n  private pushedItemsPath: Array<Array<GridsterItem>>;\n  private gridsterItem: GridsterItemComponentInterface;\n  private gridster: GridsterComponentInterface;\n  private tryPattern: {\n    fromEast:\n      (gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface, direction: string) => boolean,\n    fromWest:\n      (gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface, direction: string) => boolean,\n    fromNorth:\n      (gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface, direction: string) => boolean,\n    fromSouth:\n      (gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface, direction: string) => boolean\n  };\n\n  constructor(gridsterItem: GridsterItemComponentInterface) {\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: this.tryWest,\n      fromWest: this.tryEast,\n      fromNorth: this.trySouth,\n      fromSouth: this.tryNorth\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n\n  destroy(): void {\n    // @ts-ignore\n    delete this.gridster;\n    // @ts-ignore\n    delete this.gridsterItem;\n  }\n\n  pushItems(direction: string): boolean {\n    if (this.gridster.$options.pushResizeItems) {\n      return this.push(this.gridsterItem, direction);\n    } else {\n      return false;\n    }\n  }\n\n  restoreItems(): void {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.$item.x = pushedItem.item.x || 0;\n      pushedItem.$item.y = pushedItem.item.y || 0;\n      pushedItem.$item.cols = pushedItem.item.cols || 1;\n      pushedItem.$item.row = pushedItem.item.row || 1;\n      pushedItem.setSize();\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  setPushedItems(): void {\n    let i = 0;\n    const l: number = this.pushedItems.length;\n    let pushedItem: GridsterItemComponentInterface;\n    for (; i < l; i++) {\n      pushedItem = this.pushedItems[i];\n      pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n    }\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n  }\n\n  checkPushBack(): void {\n    let i: number = this.pushedItems.length - 1;\n    let change = false;\n    for (; i > -1; i--) {\n      if (this.checkPushedItem(this.pushedItems[i], i)) {\n        change = true;\n      }\n    }\n    if (change) {\n      this.checkPushBack();\n    }\n  }\n\n  private push(gridsterItem: GridsterItemComponentInterface, direction: string): boolean {\n    const gridsterItemCollision: GridsterItemComponentInterface | boolean = this.gridster.checkCollision(gridsterItem.$item);\n    if (gridsterItemCollision && gridsterItemCollision !== true &&\n      gridsterItemCollision !== this.gridsterItem && gridsterItemCollision.canBeResized()) {\n      if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\n        return true;\n      }\n    } else if (gridsterItemCollision === false) {\n      return true;\n    }\n    return false;\n  }\n\n  private trySouth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                   direction: string): boolean {\n    const backUpY = gridsterItemCollide.$item.y;\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n    gridsterItemCollide.$item.rows = backUpRows + backUpY - gridsterItemCollide.$item.y;\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.y = backUpY;\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n    return false;\n  }\n\n  private tryNorth(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                   direction: string): boolean {\n    const backUpRows = gridsterItemCollide.$item.rows;\n    gridsterItemCollide.$item.rows = gridsterItem.$item.y - gridsterItemCollide.$item.y;\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.rows = backUpRows;\n    }\n    return false;\n  }\n\n  private tryEast(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                  direction: string): boolean {\n    const backUpX = gridsterItemCollide.$item.x;\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n    gridsterItemCollide.$item.cols = backUpCols + backUpX - gridsterItemCollide.$item.x;\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.x = backUpX;\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n    return false;\n  }\n\n  private tryWest(gridsterItemCollide: GridsterItemComponentInterface, gridsterItem: GridsterItemComponentInterface,\n                  direction: string): boolean {\n    const backUpCols = gridsterItemCollide.$item.cols;\n    gridsterItemCollide.$item.cols = gridsterItem.$item.x - gridsterItemCollide.$item.x;\n    if (!this.gridster.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\n      && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n      gridsterItemCollide.setSize();\n      this.addToPushed(gridsterItemCollide);\n      this.push(gridsterItem, direction);\n      return true;\n    } else {\n      gridsterItemCollide.$item.cols = backUpCols;\n    }\n    return false;\n  }\n\n  private addToPushed(gridsterItem: GridsterItemComponentInterface): void {\n    if (this.pushedItems.indexOf(gridsterItem) < 0) {\n      this.pushedItems.push(gridsterItem);\n      this.pushedItemsPath.push([\n        {\n          x: gridsterItem.item.x || 0,\n          y: gridsterItem.item.y || 0,\n          cols: gridsterItem.item.cols || 0,\n          rows: gridsterItem.item.rows || 0\n        },\n        {\n          x: gridsterItem.$item.x,\n          y: gridsterItem.$item.y,\n          cols: gridsterItem.$item.cols,\n          rows: gridsterItem.$item.rows\n        }]);\n    } else {\n      const i = this.pushedItems.indexOf(gridsterItem);\n      this.pushedItemsPath[i].push(\n        {\n          x: gridsterItem.$item.x,\n          y: gridsterItem.$item.y,\n          cols: gridsterItem.$item.cols,\n          rows: gridsterItem.$item.rows\n        });\n    }\n  }\n\n  private removeFromPushed(i: number): void {\n    if (i > -1) {\n      this.pushedItems.splice(i, 1);\n      this.pushedItemsPath.splice(i, 1);\n    }\n  }\n\n  private checkPushedItem(pushedItem: GridsterItemComponentInterface, i: number): boolean {\n    const path = this.pushedItemsPath[i];\n    let j = path.length - 2;\n    let lastPosition: { x: number, y: number, cols: number, rows: number };\n    let x;\n    let y;\n    let cols;\n    let rows;\n    for (; j > -1; j--) {\n      lastPosition = path[j];\n      x = pushedItem.$item.x;\n      y = pushedItem.$item.y;\n      cols = pushedItem.$item.cols;\n      rows = pushedItem.$item.rows;\n      pushedItem.$item.x = lastPosition.x;\n      pushedItem.$item.y = lastPosition.y;\n      pushedItem.$item.cols = lastPosition.cols;\n      pushedItem.$item.rows = lastPosition.rows;\n      if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n        pushedItem.setSize();\n        path.splice(j + 1, path.length - 1 - j);\n      } else {\n        pushedItem.$item.x = x;\n        pushedItem.$item.y = y;\n        pushedItem.$item.cols = cols;\n        pushedItem.$item.rows = rows;\n      }\n    }\n    if (path.length < 2) {\n      this.removeFromPushed(i);\n      return true;\n    }\n    return false;\n  }\n}\n","import {NgZone} from '@angular/core';\nimport {GridsterComponentInterface} from './gridster.interface';\nimport {DirTypes} from './gridsterConfig.interface';\nimport {GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {GridsterPush} from './gridsterPush.service';\nimport {GridsterPushResize} from './gridsterPushResize.service';\nimport {GridsterResizeEventType, MouseEvent2} from './gridsterResizeEventType.interface';\n\nimport {cancelScroll, scroll} from './gridsterScroll.service';\nimport {GridsterUtils} from './gridsterUtils.service';\n\nexport class GridsterResizable {\n  gridsterItem: GridsterItemComponentInterface;\n  gridster: GridsterComponentInterface;\n  lastMouse: {\n    clientX: number,\n    clientY: number\n  };\n  itemBackup: number[];\n  resizeEventScrollType: GridsterResizeEventType;\n  directionFunction: (e: { clientX: number, clientY: number }) => void;\n  dragFunction: (event: MouseEvent) => void;\n  dragStopFunction: (event: MouseEvent2) => void;\n  resizeEnabled: boolean;\n  mousemove: () => void;\n  mouseup: () => void;\n  mouseleave: () => void;\n  cancelOnBlur: () => void;\n  touchmove: () => void;\n  touchend: () => void;\n  touchcancel: () => void;\n  push: GridsterPush;\n  pushResize: GridsterPushResize;\n  minHeight: number;\n  minWidth: number;\n  offsetTop: number;\n  offsetLeft: number;\n  diffTop: number;\n  diffLeft: number;\n  diffRight: number;\n  diffBottom: number;\n  margin: number;\n  originalClientX: number;\n  originalClientY: number;\n  top: number;\n  left: number;\n  bottom: number;\n  right: number;\n  width: number;\n  height: number;\n  newPosition: number;\n\n  constructor(gridsterItem: GridsterItemComponentInterface, gridster: GridsterComponentInterface, private zone: NgZone) {\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.itemBackup = [0, 0, 0, 0];\n    this.resizeEventScrollType = {w: false, e: false, n: false, s: false};\n  }\n\n  destroy(): void {\n    if (this.gridster.previewStyle) {\n      this.gridster.previewStyle();\n    }\n    // @ts-ignore\n    delete this.gridsterItem;\n    // @ts-ignore\n    delete this.gridster;\n  }\n\n  dragStart(e: MouseEvent2): void {\n    if (e.which && e.which !== 1) {\n      return;\n    }\n    if (this.gridster.options.resizable && this.gridster.options.resizable.start) {\n      this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\n    }\n    e.stopPropagation();\n    e.preventDefault();\n    this.dragFunction = this.dragMove.bind(this);\n    this.dragStopFunction = this.dragStop.bind(this);\n    this.zone.runOutsideAngular(() => {\n      this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\n      this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\n    });\n    this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n    this.mouseleave = this.gridsterItem.renderer.listen('document', 'mouseleave', this.dragStopFunction);\n    this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n    this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n    this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n\n    this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.left = this.gridsterItem.left;\n    this.top = this.gridsterItem.top;\n    this.originalClientX = e.clientX;\n    this.originalClientY = e.clientY;\n    this.width = this.gridsterItem.width;\n    this.height = this.gridsterItem.height;\n    this.bottom = this.gridsterItem.top + this.gridsterItem.height;\n    this.right = this.gridsterItem.left + this.gridsterItem.width;\n    this.margin = this.gridster.$options.margin;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.diffLeft = e.clientX + this.offsetLeft - this.left;\n    this.diffRight = e.clientX + this.offsetLeft - this.right;\n    this.diffTop = e.clientY + this.offsetTop - this.top;\n    this.diffBottom = e.clientY + this.offsetTop - this.bottom;\n    this.minHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows || this.gridster.$options.minItemRows)\n      - this.margin;\n    this.minWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols || this.gridster.$options.minItemCols)\n      - this.margin;\n    this.gridster.movingItem = this.gridsterItem.$item;\n    this.gridster.previewStyle();\n    this.push = new GridsterPush(this.gridsterItem);\n    this.pushResize = new GridsterPushResize(this.gridsterItem);\n    this.gridster.dragInProgress = true;\n    this.gridster.updateGrid();\n\n    if (e.target?.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-n') > -1) {\n      this.resizeEventScrollType.n = true;\n      this.directionFunction = this.handleN;\n    } else if (e.target?.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-w') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleE;\n      } else {\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleW;\n      }\n    } else if (e.target?.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-s') > -1) {\n      this.resizeEventScrollType.s = true;\n      this.directionFunction = this.handleS;\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-e') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleW;\n      } else {\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleE;\n      }\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-nw') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleNE;\n      } else {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleNW;\n      }\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-ne') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleNW;\n      } else {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleNE;\n      }\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-sw') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleSE;\n      } else {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleSW;\n      }\n    } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-se') > -1) {\n      if (this.gridster.$options.dirType === DirTypes.RTL) {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleSW;\n      } else {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleSE;\n      }\n    }\n  }\n\n  dragMove(e: MouseEvent): void {\n    e.stopPropagation();\n    e.preventDefault();\n    GridsterUtils.checkTouchEvent(e);\n    this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n    this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n    scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction.bind(this), true,\n      this.resizeEventScrollType);\n\n    const scale = this.gridster.options.scale || 1;\n    this.directionFunction({\n      clientX: this.originalClientX + (e.clientX - this.originalClientX) / scale,\n      clientY: this.originalClientY + (e.clientY - this.originalClientY) / scale\n    });\n\n    this.lastMouse.clientX = e.clientX;\n    this.lastMouse.clientY = e.clientY;\n    this.zone.run(() => {\n      this.gridster.updateGrid();\n    });\n  }\n\n  dragStop(e: MouseEvent): void {\n    e.stopPropagation();\n    e.preventDefault();\n    cancelScroll();\n    this.mousemove();\n    this.mouseup();\n    this.mouseleave();\n    this.cancelOnBlur();\n    this.touchmove();\n    this.touchend();\n    this.touchcancel();\n    this.gridster.dragInProgress = false;\n    this.gridster.updateGrid();\n    if (this.gridster.options.resizable && this.gridster.options.resizable.stop) {\n      Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e))\n        .then(this.makeResize.bind(this), this.cancelResize.bind(this));\n    } else {\n      this.makeResize();\n    }\n    setTimeout(() => {\n      this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-resizing');\n      if (this.gridster) {\n        this.gridster.movingItem = null;\n        this.gridster.previewStyle();\n      }\n    });\n  }\n\n  cancelResize(): void {\n    this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\n    this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\n    this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n    this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n    this.gridsterItem.setSize();\n    this.push.restoreItems();\n    this.pushResize.restoreItems();\n    this.push.destroy();\n    // @ts-ignore\n    delete this.push;\n    this.pushResize.destroy();\n    // @ts-ignore\n    delete this.pushResize;\n  }\n\n  makeResize(): void {\n    this.gridsterItem.setSize();\n    this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n    this.push.setPushedItems();\n    this.pushResize.setPushedItems();\n    this.push.destroy();\n    // @ts-ignore\n    delete this.push;\n    this.pushResize.destroy();\n    // @ts-ignore\n    delete this.pushResize;\n  }\n\n  handleN(e: MouseEvent): void {\n    this.top = e.clientY + this.offsetTop - this.diffTop;\n    this.height = this.bottom - this.top;\n    if (this.minHeight > this.height) {\n      this.height = this.minHeight;\n      this.top = this.bottom - this.minHeight;\n    }\n    this.newPosition = this.gridster.pixelsToPositionY(this.top + this.margin, Math.floor);\n    if (this.gridsterItem.$item.y !== this.newPosition) {\n      this.itemBackup[1] = this.gridsterItem.$item.y;\n      this.itemBackup[3] = this.gridsterItem.$item.rows;\n      this.gridsterItem.$item.rows += this.gridsterItem.$item.y - this.newPosition;\n      this.gridsterItem.$item.y = this.newPosition;\n      this.pushResize.pushItems(this.pushResize.fromSouth);\n      this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.y = this.itemBackup[1];\n        this.gridsterItem.$item.rows = this.itemBackup[3];\n        this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\n        this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemTop(this.top);\n    this.setItemHeight(this.height);\n  }\n\n  handleW(e: MouseEvent): void {\n    const clientX = this.gridster.$options.dirType === DirTypes.RTL ? this.originalClientX + (this.originalClientX - e.clientX) : e.clientX;\n    this.left = clientX + this.offsetLeft - this.diffLeft;\n\n    this.width = this.right - this.left;\n    if (this.minWidth > this.width) {\n      this.width = this.minWidth;\n      this.left = this.right - this.minWidth;\n    }\n    this.newPosition = this.gridster.pixelsToPositionX(this.left + this.margin, Math.floor);\n    if (this.gridsterItem.$item.x !== this.newPosition) {\n      this.itemBackup[0] = this.gridsterItem.$item.x;\n      this.itemBackup[2] = this.gridsterItem.$item.cols;\n      this.gridsterItem.$item.cols += this.gridsterItem.$item.x - this.newPosition;\n      this.gridsterItem.$item.x = this.newPosition;\n      this.pushResize.pushItems(this.pushResize.fromEast);\n      this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.x = this.itemBackup[0];\n        this.gridsterItem.$item.cols = this.itemBackup[2];\n        this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\n        this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemLeft(this.left);\n    this.setItemWidth(this.width);\n  }\n\n  handleS(e: MouseEvent): void {\n    this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\n    if (this.minHeight > this.height) {\n      this.height = this.minHeight;\n    }\n    this.bottom = this.top + this.height;\n    this.newPosition = this.gridster.pixelsToPositionY(this.bottom, Math.ceil);\n    if ((this.gridsterItem.$item.y + this.gridsterItem.$item.rows) !== this.newPosition) {\n      this.itemBackup[3] = this.gridsterItem.$item.rows;\n      this.gridsterItem.$item.rows = this.newPosition - this.gridsterItem.$item.y;\n      this.pushResize.pushItems(this.pushResize.fromNorth);\n      this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.rows = this.itemBackup[3];\n        this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemHeight(this.height);\n  }\n\n  handleE(e: MouseEvent): void {\n    const clientX = this.gridster.$options.dirType === DirTypes.RTL ? this.originalClientX + (this.originalClientX - e.clientX) : e.clientX;\n    this.width = clientX + this.offsetLeft - this.diffRight - this.left;\n\n    if (this.minWidth > this.width) {\n      this.width = this.minWidth;\n    }\n    this.right = this.left + this.width;\n    this.newPosition = this.gridster.pixelsToPositionX(this.right, Math.ceil);\n    if ((this.gridsterItem.$item.x + this.gridsterItem.$item.cols) !== this.newPosition) {\n      this.itemBackup[2] = this.gridsterItem.$item.cols;\n      this.gridsterItem.$item.cols = this.newPosition - this.gridsterItem.$item.x;\n      this.pushResize.pushItems(this.pushResize.fromWest);\n      this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\n      if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.cols = this.itemBackup[2];\n        this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n        return;\n      } else {\n        this.gridster.previewStyle();\n      }\n      this.pushResize.checkPushBack();\n      this.push.checkPushBack();\n    }\n    this.setItemWidth(this.width);\n  }\n\n  handleNW(e: MouseEvent): void {\n    this.handleN(e);\n    this.handleW(e);\n  }\n\n  handleNE(e: MouseEvent): void {\n    this.handleN(e);\n    this.handleE(e);\n  }\n\n  handleSW(e: MouseEvent): void {\n    this.handleS(e);\n    this.handleW(e);\n  }\n\n  handleSE(e: MouseEvent): void {\n    this.handleS(e);\n    this.handleE(e);\n  }\n\n  toggle(): void {\n    this.resizeEnabled = this.gridsterItem.canBeResized();\n  }\n\n  dragStartDelay(e: MouseEvent | TouchEvent): void {\n    GridsterUtils.checkTouchEvent(e);\n    if (!this.gridster.$options.resizable.delayStart) {\n      this.dragStart(e as MouseEvent2);\n      return;\n    }\n    const timeout = setTimeout(() => {\n      this.dragStart(e as MouseEvent2);\n      cancelDrag();\n    }, this.gridster.$options.resizable.delayStart);\n    const cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n    const cancelMouseLeave = this.gridsterItem.renderer.listen('document', 'mouseleave', cancelDrag);\n    const cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n    const cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n    const cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n    const cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n\n    function cancelMove(eventMove: MouseEvent): void {\n      GridsterUtils.checkTouchEvent(eventMove);\n      if (Math.abs(eventMove.clientX - (e as MouseEvent).clientX) > 9\n        || Math.abs(eventMove.clientY - (e as MouseEvent).clientY) > 9) {\n        cancelDrag();\n      }\n    }\n\n    function cancelDrag(): void {\n      clearTimeout(timeout);\n      cancelOnBlur();\n      cancelMouse();\n      cancelMouseLeave();\n      cancelTouchMove();\n      cancelTouchEnd();\n      cancelTouchCancel();\n    }\n  }\n\n  setItemTop(top: number): void {\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, this.left, top);\n  }\n\n  setItemLeft(left: number): void {\n    this.gridster.gridRenderer.setCellPosition(this.gridsterItem.renderer, this.gridsterItem.el, left, this.top);\n  }\n\n  setItemHeight(height: number): void {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\n  }\n\n  setItemWidth(width: number): void {\n    this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\n  }\n}\n","import {\n  Component,\n  ElementRef,\n  HostBinding,\n  Inject,\n  Input,\n  NgZone,\n  OnChanges,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  SimpleChanges,\n  ViewEncapsulation\n} from '@angular/core';\n\nimport {GridsterDraggable} from './gridsterDraggable.service';\nimport {GridsterResizable} from './gridsterResizable.service';\nimport {GridsterUtils} from './gridsterUtils.service';\nimport {GridsterItem, GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {GridsterComponent} from './gridster.component';\n\n@Component({\n  selector: 'gridster-item',\n  templateUrl: './gridsterItem.html',\n  styleUrls: ['./gridsterItem.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterItemComponent implements OnInit, OnDestroy, OnChanges, GridsterItemComponentInterface {\n  @Input() item: GridsterItem;\n  $item: GridsterItem;\n  el: HTMLElement;\n  gridster: GridsterComponent;\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n  drag: GridsterDraggable;\n  resize: GridsterResizable;\n  notPlaced: boolean;\n  init: boolean;\n\n  @HostBinding('style.z-index')\n  get zIndex(): number {\n    return this.getLayerIndex() + this.gridster.$options.baseLayerIndex;\n  }\n\n  constructor(@Inject(ElementRef) el: ElementRef, gridster: GridsterComponent, @Inject(Renderer2) public renderer: Renderer2,\n              @Inject(NgZone) private zone: NgZone) {\n    this.el = el.nativeElement;\n    this.$item = {\n      cols: -1,\n      rows: -1,\n      x: -1,\n      y: -1,\n    };\n    this.gridster = gridster;\n    this.drag = new GridsterDraggable(this, gridster, this.zone);\n    this.resize = new GridsterResizable(this, gridster, this.zone);\n  }\n\n  ngOnInit(): void {\n    this.gridster.addItem(this);\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.item) {\n      this.updateOptions();\n\n      if (!this.init) {\n        this.gridster.calculateLayoutDebounce();\n      }\n    }\n    if (changes.item && changes.item.previousValue) {\n      this.setSize();\n    }\n  }\n\n  updateOptions(): void {\n    this.$item = GridsterUtils.merge(this.$item, this.item, {\n      cols: undefined,\n      rows: undefined,\n      x: undefined,\n      y: undefined,\n      layerIndex: undefined,\n      dragEnabled: undefined,\n      resizeEnabled: undefined,\n      compactEnabled: undefined,\n      maxItemRows: undefined,\n      minItemRows: undefined,\n      maxItemCols: undefined,\n      minItemCols: undefined,\n      maxItemArea: undefined,\n      minItemArea: undefined,\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.gridster.removeItem(this);\n    // @ts-ignore\n    delete this.gridster;\n    this.drag.destroy();\n    // @ts-ignore\n    delete this.drag;\n    this.resize.destroy();\n    // @ts-ignore\n    delete this.resize;\n  }\n\n  setSize(): void {\n    this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n    this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n    this.updateItemSize();\n  }\n\n  updateItemSize(): void {\n    const top = this.$item.y * this.gridster.curRowHeight;\n    const left = this.$item.x * this.gridster.curColWidth;\n    const width = this.$item.cols * this.gridster.curColWidth - this.gridster.$options.margin;\n    const height = this.$item.rows * this.gridster.curRowHeight - this.gridster.$options.margin;\n\n    this.top = top;\n    this.left = left;\n\n    if (!this.init && width > 0 && height > 0) {\n      this.init = true;\n      if (this.item.initCallback) {\n        this.item.initCallback(this.item, this);\n      }\n      if (this.gridster.options.itemInitCallback) {\n        this.gridster.options.itemInitCallback(this.item, this);\n      }\n      if (this.gridster.$options.scrollToNewItems) {\n        this.el.scrollIntoView(false);\n      }\n    }\n    if (width !== this.width || height !== this.height) {\n      this.width = width;\n      this.height = height;\n      if (this.gridster.options.itemResizeCallback) {\n        this.gridster.options.itemResizeCallback(this.item, this);\n      }\n    }\n  }\n\n  itemChanged(): void {\n    if (this.gridster.options.itemChangeCallback) {\n      this.gridster.options.itemChangeCallback(this.item, this);\n    }\n  }\n\n  checkItemChanges(newValue: GridsterItem, oldValue: GridsterItem): void {\n    if (newValue.rows === oldValue.rows && newValue.cols === oldValue.cols && newValue.x === oldValue.x && newValue.y === oldValue.y) {\n      return;\n    }\n    if (this.gridster.checkCollision(this.$item)) {\n      this.$item.x = oldValue.x || 0;\n      this.$item.y = oldValue.y || 0;\n      this.$item.cols = oldValue.cols || 1;\n      this.$item.rows = oldValue.rows || 1;\n      this.setSize();\n    } else {\n      this.item.cols = this.$item.cols;\n      this.item.rows = this.$item.rows;\n      this.item.x = this.$item.x;\n      this.item.y = this.$item.y;\n      this.gridster.calculateLayoutDebounce();\n      this.itemChanged();\n    }\n  }\n\n  canBeDragged(): boolean {\n    return !this.gridster.mobile &&\n      (this.$item.dragEnabled === undefined ? this.gridster.$options.draggable.enabled : this.$item.dragEnabled);\n  }\n\n  canBeResized(): boolean {\n    return !this.gridster.mobile &&\n      (this.$item.resizeEnabled === undefined ? this.gridster.$options.resizable.enabled : this.$item.resizeEnabled);\n  }\n\n  bringToFront(offset: number): void {\n    if (offset && offset <= 0) {\n      return;\n    }\n    const layerIndex = this.getLayerIndex();\n    const topIndex = this.gridster.$options.maxLayerIndex;\n    if (layerIndex < topIndex) {\n      const targetIndex = offset ? layerIndex + offset : topIndex;\n      this.item.layerIndex = this.$item.layerIndex = targetIndex > topIndex ? topIndex : targetIndex;\n    }\n  }\n\n  sendToBack(offset: number): void {\n    if (offset && offset <= 0) {\n      return;\n    }\n    const layerIndex = this.getLayerIndex();\n    if (layerIndex > 0) {\n      const targetIndex = offset ? layerIndex - offset : 0;\n      this.item.layerIndex = this.$item.layerIndex = targetIndex < 0 ? 0 : targetIndex;\n    }\n  }\n\n  private getLayerIndex(): number {\n    if (this.item.layerIndex !== undefined) {\n      return this.item.layerIndex;\n    }\n    if (this.gridster.$options.defaultLayerIndex !== undefined) {\n      return this.gridster.$options.defaultLayerIndex;\n    }\n    return 0;\n  }\n\n}\n","import {GridsterDraggable} from './gridsterDraggable.service';\nimport {Renderer2} from '@angular/core';\nimport {GridsterResizable} from './gridsterResizable.service';\nimport {GridsterComponentInterface} from './gridster.interface';\n\nexport abstract class GridsterItemComponentInterface {\n  item: GridsterItem;\n  $item: GridsterItem;\n  top: number;\n  left: number;\n  width: number;\n  height: number;\n  drag: GridsterDraggable;\n  resize: GridsterResizable;\n  notPlaced: boolean;\n  updateOptions: () => void;\n  itemChanged: () => void;\n  setSize: () => void;\n  checkItemChanges: (newValue: GridsterItem, oldValue: GridsterItem) => void;\n  canBeDragged: () => boolean;\n  canBeResized: () => boolean;\n  bringToFront: (offset: number) => void;\n  sendToBack: (v: number) => void;\n  el: HTMLElement;\n  gridster: GridsterComponentInterface;\n  renderer: Renderer2;\n}\n\nexport interface GridsterItem {\n  x: number;\n  y: number;\n  rows: number;\n  cols: number;\n  layerIndex?: number;\n  initCallback?: (item: GridsterItem, itemComponent: GridsterItemComponentInterface) => void;\n  dragEnabled?: boolean;\n  resizeEnabled?: boolean;\n  compactEnabled?: boolean;\n  maxItemRows?: number;\n  minItemRows?: number;\n  maxItemCols?: number;\n  minItemCols?: number;\n  minItemArea?: number;\n  maxItemArea?: number;\n\n  // tslint:disable-next-line:no-any\n  [propName: string]: any;\n}\n","import {GridsterConfigS} from './gridsterConfigS.interface';\nimport {ChangeDetectorRef, NgZone, Renderer2} from '@angular/core';\nimport {GridsterEmptyCell} from './gridsterEmptyCell.service';\nimport {GridsterCompact} from './gridsterCompact.service';\nimport {GridsterConfig} from './gridsterConfig.interface';\nimport {GridsterItem, GridsterItemComponentInterface} from './gridsterItem.interface';\nimport {GridsterRenderer} from './gridsterRenderer.service';\n\nexport abstract class GridsterComponentInterface {\n  $options: GridsterConfigS;\n  grid: GridsterItemComponentInterface[];\n  checkCollision: (item: GridsterItem) => GridsterItemComponentInterface | boolean;\n  checkCollisionForSwaping: (item: GridsterItem) => GridsterItemComponentInterface | boolean;\n  positionXToPixels: (x: number) => number;\n  pixelsToPositionX: (x: number, roundingMethod: (x: number) => number, noLimit?: boolean) => number;\n  positionYToPixels: (y: number) => number;\n  pixelsToPositionY: (y: number, roundingMethod: (x: number) => number, noLimit?: boolean) => number;\n  findItemWithItem: (item: GridsterItem) => GridsterItemComponentInterface | boolean;\n  findItemsWithItem: (item: GridsterItem) => GridsterItemComponentInterface[];\n  checkGridCollision: (item: GridsterItem) => boolean;\n  checkCollisionTwoItems: (item: GridsterItem, item2: GridsterItem) => boolean;\n  getItemComponent: (item: GridsterItem) => GridsterItemComponentInterface | undefined;\n  el: HTMLElement;\n  renderer: Renderer2;\n  gridRenderer: GridsterRenderer;\n  cdRef: ChangeDetectorRef;\n  options: GridsterConfig;\n  calculateLayoutDebounce: () => void;\n  updateGrid: () => void;\n  movingItem: GridsterItem | null;\n  addItem: (item: GridsterItemComponentInterface) => void;\n  removeItem: (item: GridsterItemComponentInterface) => void;\n  previewStyle: (drag?: boolean) => void;\n  mobile: boolean;\n  curWidth: number;\n  curHeight: number;\n  columns: number;\n  rows: number;\n  curColWidth: number;\n  curRowHeight: number;\n  windowResize: (() => void) | null;\n  setGridDimensions: (() => void);\n  dragInProgress: boolean;\n  emptyCell: GridsterEmptyCell;\n  compact: GridsterCompact;\n  zone: NgZone;\n  gridRows: Array<number>;\n  gridColumns: Array<number>;\n}\n","import {Component, ElementRef, Inject, OnDestroy, Renderer2, ViewEncapsulation} from '@angular/core';\n\nimport {GridsterComponent} from './gridster.component';\n\n@Component({\n  selector: 'gridster-preview',\n  template: '',\n  styleUrls: ['./gridsterPreview.css'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class GridsterPreviewComponent implements OnDestroy {\n  el: HTMLElement;\n  gridster: GridsterComponent;\n\n  constructor(@Inject(ElementRef)  el: ElementRef,  gridster: GridsterComponent, @Inject(Renderer2) public renderer: Renderer2) {\n    this.el = el.nativeElement;\n    this.gridster = gridster;\n    this.gridster.previewStyle = this.previewStyle.bind(this);\n  }\n\n  ngOnDestroy(): void {\n    // @ts-ignore\n    delete this.el;\n    // @ts-ignore\n    delete this.gridster.previewStyle;\n    // @ts-ignore\n    delete this.gridster;\n  }\n\n  previewStyle(drag?: boolean): void {\n    if (!this.gridster.movingItem) {\n      this.renderer.setStyle(this.el, 'display', '');\n    } else {\n      if (this.gridster.compact && drag) {\n        this.gridster.compact.checkCompactItem(this.gridster.movingItem);\n      }\n      this.renderer.setStyle(this.el, 'display', 'block');\n      this.gridster.gridRenderer.updateItem(this.el, this.gridster.movingItem, this.renderer);\n    }\n  }\n}\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\n\nimport {GridsterComponent} from './gridster.component';\nimport {GridsterItemComponent} from './gridsterItem.component';\nimport {GridsterPreviewComponent} from './gridsterPreview.component';\n\n@NgModule({\n  declarations: [\n    GridsterComponent,\n    GridsterItemComponent,\n    GridsterPreviewComponent\n  ],\n  imports: [\n    CommonModule\n  ],\n  exports: [GridsterComponent, GridsterItemComponent]\n})\nexport class GridsterModule {\n}\n"]}